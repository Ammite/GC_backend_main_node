# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã (Kaspi)

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–æ–≤ 
—Å –≤—ã–≥—Ä—É–∑–∫–∞–º–∏ –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã Kaspi.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
-----------------
- inspect_excel_file(file_path, max_rows) - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- parse_terminal_report(file_path) - –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç—á–µ—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
- get_transactions_by_date(file_path, date) - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
- get_transactions_by_type(file_path, type) - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
- get_transactions_summary(file_path) - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- get_total_amount(file_path) - –æ–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- get_total_to_credit(file_path) - —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
- get_total_commission(file_path) - –æ–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è

–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –ë–î:
--------------------------------
- analyze_matching_fields(file_path, db) - –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- compare_terminal_report_with_db(file_path, db) - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ë–î –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- match_transaction_with_sales(transaction, db) - –ø–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Sales
- parse_transaction_datetime(transaction) - –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
--------------------
    from utils.terminal_report_parsing import parse_terminal_report
    
    data = parse_terminal_report("report.xlsx")
    print(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['total_transactions']}")
    print(f"–û–±—â–∞—è —Å—É–º–º–∞: {data['total_amount']} —Ç–≥")
    print(f"–ö–æ–º–∏—Å—Å–∏—è: {data['total_commission']} —Ç–≥")

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
-----------
- pandas >= 2.2.3
- openpyxl >= 3.1.5
"""

import pandas as pd
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
import os
import sys
import json
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ stdout —É–∂–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if hasattr(sys.stdout, 'buffer'):
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    if hasattr(sys.stderr, 'buffer'):
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')


def inspect_excel_file(file_path: str, max_rows: int = 10) -> None:
    """
    –ü–æ–¥—Ä–æ–±–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        max_rows: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    """
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print("=" * 80)
    print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–ê")
    print("=" * 80)
    print(f"\nüìÅ –§–∞–π–ª: {file_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        df_raw = pd.read_excel(file_path, engine='openpyxl', header=None)
        
        print(f"\nüìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(df_raw)} —Å—Ç—Ä–æ–∫ √ó {len(df_raw.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–æ–∫ "–∫–∞–∫ –µ—Å—Ç—å"
        print(f"\n" + "=" * 80)
        print(f"–ü–ï–†–í–´–ï {min(max_rows, len(df_raw))} –°–¢–†–û–ö (–ë–ï–ó –û–ë–†–ê–ë–û–¢–ö–ò)")
        print("=" * 80)
        
        for idx, row in df_raw.head(max_rows).iterrows():
            print(f"\nüìå –°—Ç—Ä–æ–∫–∞ {idx + 1}:")
            non_empty_cells = []
            for col_idx, value in enumerate(row):
                if pd.notna(value) and str(value).strip():
                    non_empty_cells.append(f"  –ö–æ–ª–æ–Ω–∫–∞ {col_idx}: {value}")
            
            if non_empty_cells:
                for cell in non_empty_cells[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–µ–ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
                    print(cell)
            else:
                print("  (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        print(f"\n" + "=" * 80)
        print("üîç –ü–û–ò–°–ö –°–¢–†–û–ö–ò –° –ó–ê–ì–û–õ–û–í–ö–ê–ú–ò")
        print("=" * 80)
        
        header_row_idx = None
        for idx, row in df_raw.iterrows():
            if row.iloc[0] == '#':
                header_row_idx = idx
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: —Å—Ç—Ä–æ–∫–∞ {idx + 1}")
                print(f"\n–ó–∞–≥–æ–ª–æ–≤–∫–∏:")
                for col_idx, value in enumerate(row):
                    if pd.notna(value) and str(value).strip():
                        print(f"  {col_idx + 1}. {value}")
                break
        
        if header_row_idx is None:
            print("\n‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–∏—â–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É '#')")
            return
        
        # –ß–∏—Ç–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df = pd.read_excel(file_path, engine='openpyxl', header=header_row_idx)
        df = df.dropna(how='all')
        df = df[df.iloc[:, 0].apply(lambda x: str(x).isdigit() if pd.notna(x) else False)]
        
        print(f"\n" + "=" * 80)
        print("üìã –°–ü–ò–°–û–ö –í–°–ï–• –ö–û–õ–û–ù–û–ö –° –ü–†–ò–ú–ï–†–ê–ú–ò –î–ê–ù–ù–´–•")
        print("=" * 80)
        print(f"\n–í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        
        for i, col in enumerate(df.columns, 1):
            print(f"\n{i}. üìå {col}")
            print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {df[col].dtype}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            if pd.api.types.is_numeric_dtype(df[col]):
                non_null = df[col].dropna()
                if len(non_null) > 0:
                    print(f"   –ù–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(non_null)}")
                    print(f"   –ú–∏–Ω–∏–º—É–º: {non_null.min()}")
                    print(f"   –ú–∞–∫—Å–∏–º—É–º: {non_null.max()}")
                    print(f"   –°—Ä–µ–¥–Ω–µ–µ: {non_null.mean():.2f}")
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                unique_vals = df[col].dropna().unique()
                print(f"   –ù–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {df[col].notna().sum()}")
                if len(unique_vals) > 0:
                    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(unique_vals)}")
                    if len(unique_vals) <= 5:
                        print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {', '.join(map(str, unique_vals))}")
                    else:
                        print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(map(str, unique_vals[:3]))}...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
            first_vals = df[col].head(3).tolist()
            print(f"   –ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {first_vals}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        print(f"\n" + "=" * 80)
        print("üìù –ü–†–ò–ú–ï–†–´ –ü–û–õ–ù–´–• –ó–ê–ü–ò–°–ï–ô (–¢–†–ê–ù–ó–ê–ö–¶–ò–ô)")
        print("=" * 80)
        
        for idx in range(min(3, len(df))):
            print(f"\n{'=' * 40}")
            print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{idx + 1}")
            print('=' * 40)
            
            row = df.iloc[idx]
            important_cols = [
                '#', '–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂', '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–í—Ä–µ–º—è',
                '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
                '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', '–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)',
                '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)'
            ]
            
            for col in important_cols:
                if col in df.columns:
                    value = row[col]
                    if pd.notna(value):
                        print(f"{col}: {value}")
        
        print(f"\n" + "=" * 80)
        print("‚úÖ –ü–†–û–°–ú–û–¢–† –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()


def extract_metadata(file_path: str) -> Dict[str, str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–∏–æ–¥, –ò–ò–ù/–ë–ò–ù, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ).
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        df_meta = pd.read_excel(file_path, engine='openpyxl', nrows=10, header=None)
        metadata = {}
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        for idx, row in df_meta.iterrows():
            # –§–æ—Ä–º–∞—Ç 1: –∫–ª—é—á –≤ –∫–æ–ª–æ–Ω–∫–µ 1, –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ 2 (Kaspi)
            if len(row) > 2 and pd.notna(row.iloc[1]):
                key_str = str(row.iloc[1])
                if ':' in key_str or any(word in key_str for word in ['–ü–µ—Ä–∏–æ–¥', '–ò–ò–ù', '–ë–ò–ù', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']):
                    key = key_str.replace(':', '').strip()
                    value = str(row.iloc[2]) if len(row) > 2 and pd.notna(row.iloc[2]) else None
                    if value and value != 'nan':
                        metadata[key] = value
            
            # –§–æ—Ä–º–∞—Ç 2: –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ 0 (–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞)
            if pd.notna(row.iloc[0]):
                cell_str = str(row.iloc[0])
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ò–ù/–ò–ò–ù
                if '–ë–ò–ù/–ò–ò–ù' in cell_str or '–ò–ò–ù/–ë–ò–ù' in cell_str:
                    parts = cell_str.split(':')
                    if len(parts) > 1:
                        metadata['–ò–ò–ù/–ë–ò–ù'] = parts[1].strip()
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                elif '–ø–µ—Ä–∏–æ–¥' in cell_str.lower() and '–ø–æ' in cell_str:
                    # –ò—â–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
                    import re
                    dates = re.findall(r'\d{2}\.\d{2}\.\d{4}', cell_str)
                    if len(dates) >= 2:
                        metadata['–ü–µ—Ä–∏–æ–¥'] = f"{dates[0]} - {dates[1]}"
        
        return metadata
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ {file_path}: {e}")
        return {}


def detect_report_type(file_path: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –¢–∏–ø –æ—Ç—á–µ—Ç–∞ (TerminalReportType)
    """
    try:
        df_raw = pd.read_excel(file_path, engine='openpyxl', header=None, nrows=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É - –µ—Å–ª–∏ —Ç–∞–º "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º", —Ç–æ —ç—Ç–æ Kaspi
        if df_raw.iloc[0, 1] if pd.notna(df_raw.iloc[0, 1]) else None:
            if '–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º' in str(df_raw.iloc[0, 1]):
                return TerminalReportType.KASPI_DETAILED
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —è—á–µ–π–∫—É - –µ—Å–ª–∏ —Ç–∞–º "–í—ã–ø–∏—Å–∫–∞ –ø–æ POS", —Ç–æ —ç—Ç–æ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞
        if df_raw.iloc[0, 0] if pd.notna(df_raw.iloc[0, 0]) else None:
            if '–í—ã–ø–∏—Å–∫–∞ –ø–æ POS' in str(df_raw.iloc[0, 0]):
                return TerminalReportType.BANK_STATEMENT
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–∏–º–≤–æ–ª–æ–º '#' –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ - –ø—Ä–∏–∑–Ω–∞–∫ Kaspi –æ—Ç—á–µ—Ç–∞
        for idx, row in df_raw.iterrows():
            if row.iloc[0] == '#':
                return TerminalReportType.KASPI_DETAILED
        
        return TerminalReportType.UNKNOWN
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        return TerminalReportType.UNKNOWN


def read_kaspi_detailed_report(file_path: str) -> pd.DataFrame:
    """
    –ß–∏—Ç–∞–µ—Ç –æ—Ç—á–µ—Ç Kaspi —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df_raw = pd.read_excel(file_path, engine='openpyxl', header=None)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç "#" –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ)
        header_row_idx = None
        for idx, row in df_raw.iterrows():
            if row.iloc[0] == '#':
                header_row_idx = idx
                break
        
        if header_row_idx is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (—Å —Å–∏–º–≤–æ–ª–æ–º '#')")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        df = pd.read_excel(file_path, engine='openpyxl', header=header_row_idx)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(how='all')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º)
        df = df[df.iloc[:, 0].apply(lambda x: str(x).isdigit() if pd.notna(x) else False)]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        df = df.reset_index(drop=True)
        
        return df
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Kaspi –æ—Ç—á–µ—Ç–∞ {file_path}: {str(e)}")


def read_bank_statement_report(file_path: str) -> pd.DataFrame:
    """
    –ß–∏—Ç–∞–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≤—ã–ø–∏—Å–∫—É –ø–æ POS-—Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º (–ù–∞—Ä–æ–¥–Ω—ã–π –ë–∞–Ω–∫ –∏ –¥—Ä.).
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        df_raw = pd.read_excel(file_path, engine='openpyxl', header=None)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–∏—â–µ–º —Å—Ç—Ä–æ–∫—É –≥–¥–µ –µ—Å—Ç—å "–î–∞—Ç–∞" –∏ "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        header_row_idx = None
        for idx, row in df_raw.iterrows():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —è—á–µ–µ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            row_str = ' '.join([str(cell) for cell in row if pd.notna(cell)])
            if '–î–∞—Ç–∞' in row_str and ('—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' in row_str or '–∑–∞—á–∏—Å–ª–µ–Ω–∏—è' in row_str):
                header_row_idx = idx
                break
        
        if header_row_idx is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–µ")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        df = pd.read_excel(file_path, engine='openpyxl', header=header_row_idx)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(how='all')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –Ω–µ—Ç –¥–∞—Ç—ã (–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∞—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞—Ç—É)
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        df = df[df.iloc[:, 0].apply(lambda x: pd.notna(x) and (isinstance(x, (pd.Timestamp, datetime)) or ('.' in str(x) and len(str(x).split('.')) == 3)))]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        df = df.reset_index(drop=True)
        
        return df
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏ {file_path}: {str(e)}")


def read_terminal_report(file_path: str) -> pd.DataFrame:
    """
    –ß–∏—Ç–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Å–µ—Ä.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
    report_type = detect_report_type(file_path)
    
    if report_type == TerminalReportType.KASPI_DETAILED:
        return read_kaspi_detailed_report(file_path)
    elif report_type == TerminalReportType.BANK_STATEMENT:
        return read_bank_statement_report(file_path)
    else:
        raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª–µ {file_path}")


def normalize_transaction_fields(transaction: Dict[str, Any], report_type: str) -> Dict[str, Any]:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    
    Args:
        transaction: –ò—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        report_type: –¢–∏–ø –æ—Ç—á–µ—Ç–∞
        
    Returns:
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    """
    normalized = {}
    
    if report_type == TerminalReportType.KASPI_DETAILED:
        # Kaspi –æ—Ç—á–µ—Ç - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–ª–µ–π —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        normalized = transaction.copy()
        
    elif report_type == TerminalReportType.BANK_STATEMENT:
        # –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞ - –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ñ–æ—Ä–º–∞—Ç—É Kaspi
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π:
        # "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" -> "–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏" + "–í—Ä–µ–º—è"
        # "–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" -> "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)"
        # "–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é" -> "–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)"
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü—É
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        date_time_value = transaction.get('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', transaction.get('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', ''))
        
        if date_time_value:
            if isinstance(date_time_value, datetime):
                # –ï—Å–ª–∏ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
                normalized['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'] = date_time_value.strftime('%d.%m.%Y')
                normalized['–í—Ä–µ–º—è'] = date_time_value.strftime('%H:%M:%S')
            elif isinstance(date_time_value, pd.Timestamp):
                # –ï—Å–ª–∏ pandas Timestamp
                normalized['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'] = date_time_value.strftime('%d.%m.%Y')
                normalized['–í—Ä–µ–º—è'] = date_time_value.strftime('%H:%M:%S')
            elif isinstance(date_time_value, str):
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
                try:
                    dt = datetime.strptime(date_time_value, '%d.%m.%Y %H:%M:%S')
                    normalized['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'] = dt.strftime('%d.%m.%Y')
                    normalized['–í—Ä–µ–º—è'] = dt.strftime('%H:%M:%S')
                except:
                    # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É
                    try:
                        parts = str(date_time_value).split()
                        if len(parts) >= 2:
                            normalized['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'] = parts[0]
                            normalized['–í—Ä–µ–º—è'] = parts[1]
                    except:
                        pass
        
        # –ê–¥—Ä–µ—Å - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        normalized['–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂'] = (
            transaction.get('–ê–¥—Ä–µ—Å —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏', '') or
            transaction.get('–ê–¥—Ä–µ—Å\n—Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏', '') or
            ''
        )
        
        normalized['ID —Ç–µ—Ä–º–∏–Ω–∞–ª–∞'] = transaction.get('‚Ññ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞', '')
        normalized['–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏'] = transaction.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ü–æ–∫—É–ø–∫–∞')
        
        # –°—É–º–º—ã - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        normalized['–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)'] = (
            transaction.get('–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 0) or
            transaction.get('–°—É–º–º–∞\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', 0) or
            0
        )
        
        normalized['–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)'] = (
            transaction.get('–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é', 0) or
            transaction.get('–°—É–º–º–∞ –∫\n–∑–∞—á–∏—Å–ª–µ–Ω–∏—é', 0) or
            transaction.get('–°—É–º–º–∞\n–∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é', 0) or
            0
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é
        try:
            amount = float(normalized.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', 0) or 0)
            to_credit = float(normalized.get('–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)', 0) or 0)
            commission = amount - to_credit
            if commission != 0:
                normalized['–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)'] = -abs(commission)
        except:
            pass
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        normalized['–Æ—Ä. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = (
            transaction.get('–Æ—Ä. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '') or
            transaction.get('–Æ—Ä.\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '') or
            ''
        )
        normalized['–¢–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] = (
            transaction.get('–¢–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '') or
            transaction.get('–¢–æ—Ä–≥–æ–≤–æ–µ\n–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '') or
            ''
        )
        normalized['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞'] = (
            transaction.get('–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', '') or
            transaction.get('‚Ññ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', '') or
            ''
        )
        normalized['–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è'] = (
            transaction.get('–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è', '') or
            transaction.get('–î–∞—Ç–∞\n–∑–∞—á–∏—Å–ª–µ–Ω–∏—è', '') or
            ''
        )
    
    return normalized


def parse_terminal_report(file_path: str) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç—á–µ—Ç–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
        {
            'file_path': str,            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            'report_type': str,          # –¢–∏–ø –æ—Ç—á–µ—Ç–∞
            'metadata': dict,            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–∏–æ–¥, –ò–ò–ù/–ë–ò–ù, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
            'total_transactions': int,   # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            'total_amount': float,       # –û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
            'total_to_credit': float,    # –û–±—â–∞—è —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
            'total_commission': float,   # –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
            'transactions': list,        # –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            'summary': dict              # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
    report_type = detect_report_type(file_path)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = extract_metadata(file_path)
    metadata['report_type'] = report_type
    
    # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    df = read_terminal_report(file_path)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions = []
    for idx, row in df.iterrows():
        transaction = {}
        for col in df.columns:
            value = row[col]
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º NaN –≤ None
            if pd.isna(value):
                transaction[col] = None
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Timestamp –≤ —Å—Ç—Ä–æ–∫—É
            elif isinstance(value, pd.Timestamp):
                transaction[col] = value.strftime('%Y-%m-%d %H:%M:%S')
            else:
                transaction[col] = value
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        normalized_transaction = normalize_transaction_fields(transaction, report_type)
        transactions.append(normalized_transaction)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    total_transactions = len(transactions)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏
    # –ö–æ–ª–æ–Ω–∫–∞ "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)" - —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    amount_col = '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)'
    total_amount = 0.0
    if amount_col in df.columns:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –∑–∞–º–µ–Ω—è—è None –Ω–∞ 0
        df[amount_col] = pd.to_numeric(df[amount_col], errors='coerce').fillna(0)
        total_amount = float(df[amount_col].sum())
    
    # –ö–æ–ª–æ–Ω–∫–∞ "–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)" - —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
    credit_col = '–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)'
    total_to_credit = 0.0
    if credit_col in df.columns:
        df[credit_col] = pd.to_numeric(df[credit_col], errors='coerce').fillna(0)
        total_to_credit = float(df[credit_col].sum())
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –∫–æ–º–∏—Å—Å–∏–π
    commission_cols = [
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–µ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è Kaspi Travel (—Ç)'
    ]
    
    total_commission = 0.0
    commission_details = {}
    for comm_col in commission_cols:
        if comm_col in df.columns:
            df[comm_col] = pd.to_numeric(df[comm_col], errors='coerce').fillna(0)
            commission_sum = float(df[comm_col].sum())
            commission_details[comm_col] = commission_sum
            total_commission += abs(commission_sum)
    
    return {
        'file_path': file_path,
        'report_type': report_type,
        'metadata': metadata,
        'total_transactions': total_transactions,
        'total_amount': total_amount,
        'total_to_credit': total_to_credit,
        'total_commission': total_commission,
        'commission_details': commission_details,
        'transactions': transactions,
        'summary': {
            'columns': list(df.columns),
            'first_transaction': transactions[0] if transactions else None,
            'last_transaction': transactions[-1] if transactions else None,
        }
    }


def get_transactions_by_date(file_path: str, target_date: str) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        target_date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY' –∏–ª–∏ 'YYYY-MM-DD'
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    """
    data = parse_terminal_report(file_path)
    transactions = data['transactions']
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if '-' in target_date:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –≤ DD.MM.YYYY
        parts = target_date.split('-')
        target_date = f"{parts[2]}.{parts[1]}.{parts[0]}"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
    filtered_transactions = []
    date_field = '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    
    for transaction in transactions:
        if date_field in transaction and transaction[date_field]:
            trans_date = str(transaction[date_field])
            if trans_date == target_date or trans_date.startswith(target_date):
                filtered_transactions.append(transaction)
    
    return filtered_transactions


def get_total_amount(file_path: str) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ç—á–µ—Ç–µ.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    data = parse_terminal_report(file_path)
    return data['total_amount']


def get_total_to_credit(file_path: str) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –û–±—â–∞—è —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
    """
    data = parse_terminal_report(file_path)
    return data['total_to_credit']


def get_total_commission(file_path: str) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–π.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π
    """
    data = parse_terminal_report(file_path)
    return data['total_commission']


def get_transactions_by_type(file_path: str, operation_type: str) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–∫—É–ø–∫–∞', '–í–æ–∑–≤—Ä–∞—Ç')
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    """
    data = parse_terminal_report(file_path)
    transactions = data['transactions']
    
    type_field = '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏'
    filtered_transactions = [
        t for t in transactions 
        if type_field in t and t[type_field] == operation_type
    ]
    
    return filtered_transactions


def get_transactions_summary(file_path: str) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    data = parse_terminal_report(file_path)
    df = read_terminal_report(file_path)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
    operation_stats = {}
    if '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏' in df.columns:
        operation_counts = df['–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏'].value_counts().to_dict()
        operation_stats = {str(k): int(v) for k, v in operation_counts.items()}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–ª–∞—Ç—ã
    payment_stats = {}
    if '–¢–∏–ø –æ–ø–ª–∞—Ç—ã' in df.columns:
        payment_counts = df['–¢–∏–ø –æ–ø–ª–∞—Ç—ã'].value_counts().to_dict()
        payment_stats = {str(k): int(v) for k, v in payment_counts.items()}
    
    summary = {
        'metadata': data['metadata'],
        'total_transactions': data['total_transactions'],
        'total_amount': data['total_amount'],
        'total_to_credit': data['total_to_credit'],
        'total_commission': data['total_commission'],
        'commission_details': data['commission_details'],
        'operation_types': operation_stats,
        'payment_types': payment_stats,
        'date_range': {
            'first': data['summary']['first_transaction'].get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏') if data['summary']['first_transaction'] else None,
            'last': data['summary']['last_transaction'].get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏') if data['summary']['last_transaction'] else None,
        }
    }
    
    return summary


def parse_transaction_datetime(transaction: Dict[str, Any]) -> Optional[datetime]:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
    
    Args:
        transaction: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
    Returns:
        datetime –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    """
    try:
        date_str = str(transaction.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', ''))
        time_str = str(transaction.get('–í—Ä–µ–º—è', ''))
        
        if not date_str or not time_str:
            return None
        
        # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –æ—Ç—á–µ—Ç–µ: DD.MM.YYYY –∏–ª–∏ —É–∂–µ datetime
        if isinstance(transaction.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'), datetime):
            # –ï—Å–ª–∏ —É–∂–µ datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            dt = transaction['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏']
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
            if time_str:
                time_parts = time_str.split(':')
                if len(time_parts) >= 2:
                    dt = dt.replace(hour=int(time_parts[0]), minute=int(time_parts[1]))
                    if len(time_parts) >= 3:
                        dt = dt.replace(second=int(time_parts[2]))
            return dt
        else:
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É
            datetime_str = f"{date_str} {time_str}"
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats = [
                '%d.%m.%Y %H:%M:%S',
                '%d.%m.%Y %H:%M',
                '%Y-%m-%d %H:%M:%S',
                '%Y-%m-%d %H:%M',
            ]
            
            for fmt in formats:
                try:
                    return datetime.strptime(datetime_str, fmt)
                except ValueError:
                    continue
            
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {e}")
        return None


# –¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
class TerminalReportType:
    KASPI_DETAILED = "kaspi_detailed"  # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º (Kaspi)
    BANK_STATEMENT = "bank_statement"   # –í—ã–ø–∏—Å–∫–∞ –ø–æ POS-–¥–æ–≥–æ–≤–æ—Ä—É (–ù–∞—Ä–æ–¥–Ω—ã–π –ë–∞–Ω–∫ –∏ –¥—Ä.)
    UNKNOWN = "unknown"


# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ organization_id –≤ –ë–î
TERMINAL_ORGANIZATION_MAPPING = {
    # –§–∞–±—Ä–∏–∫–∞ 
    # –≠–∫—Å–ø–æ
    "Astana, Kabanbay batyr prospekt, 58B": "8",
    "Gruzin Kuzin Ekspo": "8",
    "ASTANA G KAZAHSTAN, NUR-SULTAN": "8",
    # –ú–∞–≥–∞–∑–∏–Ω –¶–µ—Ö
    # 72 –ë–ª–æ–∫
    # –ë–æ–∫–µ–π—Ö–∞–Ω–∞
    "Nur-Sultan, ulica Alihana Bokeyhanova, 8": "6",
    "Gruzin Kuzin Bokeyhana": "6",
    "ASTANA G BOKEJHANA UL, DOM 8": "6",
    # –ù—É—Ä—Å–∞—è
    "Astana, Kunaeva, 14": "12",
    "Gruzin Kuzin Kunaeva": "12",
    "ASTANA G KONAEVA UL, DOM 14": "12",
    # –ú–∞–Ω–≥–∏–ª–∏–∫
    "Astana, Mangilik el, 50": "1",
    "Gruzin Kuzin Mangilik": "1",
    "–≥. –ê—Å—Ç–∞–Ω–∞, –ü—Ä. –ú–∞–Ω–≥–∏–ª–∏–∫ –ï–ª, 50": "1",
    # –ü—Ä–µ–º—å–µ—Ä–∞
    # –®–∞—Ä–ª—å
    "Astana, SHarl de Goll, 1a": "10",
    "Gruzin Kuzin SHarl de Goll": "10",
    "ASTANA G SHARL DE GOLLYA UL, DOM": "10",
    "–≥. –ê—Å—Ç–∞–Ω–∞, –£–ª. –®–∞—Ä–ª—å –î–µ –ì–æ–ª–ª—å, 3": "10",
    # –ú—É—Ö–∞–º–µ–¥—Ö–∞–Ω–æ–≤–∞
    "Astana, Kayym Muhamedhanova, 5": "18",
    "Gruzin Kuzin Mahamedhanova": "18",
    "ASTANA G NURA RN, MUHAMEDHANOVA": "18",
    # –ú–∞–≥–∞–∑–∏–Ω ET-KZ
    # –•–∞–π–≤–∏–ª 3
    "Astana, Prospekt Rakymzhan Koshkarbaev, 8": "9",
    "Gruzin Kuzin Hayvil": "9",
    "ASTANA G KOSHKARBAEVA UL, DOM 8": "9",
    # –ü–ª–æ—â–∞–¥—å
    "Astana, Kabanbay Batyr prospekt, 34": "2",
    "Gruzin Kuzin Plochshad": "2",
    "–≥. –ê—Å—Ç–∞–Ω–∞, –ü—Ä. –ö–∞–±–∞–Ω–±–∞–π –ë–∞—Ç—ã—Ä–∞, 34": "2",
}


def get_organization_id_by_terminal(terminal_address: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç organization_id (department_code) –ø–æ –∞–¥—Ä–µ—Å—É —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏–∑ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
    
    –õ–û–ì–ò–ö–ê:
    - –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ –∏ org_id –Ω–µ–ø—É—Å—Ç–æ–π ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç org_id
    - –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –Ω–æ org_id –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None (–∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º)
    - –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None (–∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º)
    
    Args:
        terminal_address: –ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂ –∏–∑ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        
    Returns:
        organization_id (department_code) –∏–ª–∏ None –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    if not terminal_address:
        return None
    
    normalized_address = str(terminal_address).strip().lower()
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for terminal_addr, org_id in TERMINAL_ORGANIZATION_MAPPING.items():
        if terminal_addr.lower() == normalized_address:
            # –ï—Å–ª–∏ org_id –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º)
            return org_id if org_id and org_id.strip() else None
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for terminal_addr, org_id in TERMINAL_ORGANIZATION_MAPPING.items():
        if terminal_addr.lower() in normalized_address or normalized_address in terminal_addr.lower():
            # –ï—Å–ª–∏ org_id –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º)
            return org_id if org_id and org_id.strip() else None
    
    return None


def match_transaction_with_order(
    transaction: Dict[str, Any],
    db: Session,
    time_tolerance_minutes: int = 15,
    amount_tolerance_percent: float = 2.0,
    verbose_logging: bool = False,
    transaction_num: int = 0,
    used_payment_transactions: Optional[set] = None
) -> Optional[Dict[str, Any]]:
    """
    –ò—â–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–µ–∫ (–∏ –∑–∞–∫–∞–∑) –≤ –ë–î –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
    
    –°–¢–†–£–ö–¢–£–†–ê:
    - –ó–∞–∫–∞–∑ (Order) ‚Üí –ß–µ–∫–∏ (–ø–æ payment_transaction_id) ‚Üí –ü—Ä–æ–¥–∞–∂–∏ (Sales)
    - –ö–∞–∂–¥–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ = –æ–¥–∏–Ω —á–µ–∫ (–æ–¥–∏–Ω payment_transaction_id)
    - –£ –∑–∞–∫–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–∫–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ payment_transaction_id)
    
    –ê–õ–ì–û–†–ò–¢–ú:
    1. –ü–æ–ª—É—á–∞–µ–º organization_id –ø–æ –∞–¥—Ä–µ—Å—É —Ç–æ—á–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    2. –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ Sales –ø–æ precheque_time –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    3. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ deleted_with_writeoff (—Ç–æ–ª—å–∫–æ NOT_DELETED –∏–ª–∏ NULL - —Ä–µ–∞–ª—å–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
       –ò—Å–∫–ª—é—á–∞–µ–º: DELETED_WITHOUT_WRITEOFF, DELETED_WITH_WRITEOFF –∏ –¥—Ä—É–≥–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
    4. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ organization_id
    5. **–ì–†–£–ü–ü–ò–†–£–ï–ú Sales –ø–æ payment_transaction_id** (—Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ "—á–µ–∫–∏" –≤ –ø–∞–º—è—Ç–∏)
    6. –î–ª—è –∫–∞–∂–¥–æ–≥–æ "—á–µ–∫–∞":
       - –°—É–º–º–∏—Ä—É–µ–º dish_discount_sum_int –∏–∑ –≤—Å–µ—Ö Sales —ç—Ç–æ–≥–æ —á–µ–∫–∞ (—Å—É–º–º–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫)
       - –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å—É–º–º–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (¬±2%)
    7. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:
       - –û–ø—Ä–µ–¥–µ–ª—è–µ–º order_id –∏–∑ Sales
       - –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ –≤ d_order
       - –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤ —É –∑–∞–∫–∞–∑–∞ (–¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π)
    
    Args:
        transaction: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        db: SQLAlchemy —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        time_tolerance_minutes: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API)
        amount_tolerance_percent: –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—É–º–º–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0%)
        verbose_logging: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        transaction_num: –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        used_payment_transactions: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö payment_transaction_id
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —á–µ–∫–æ–º –∏ –∑–∞–∫–∞–∑–æ–º –∏–ª–∏ None (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
        {
            'order': DOrder –æ–±—ä–µ–∫—Ç,
            'check_sales': List[Sales],          # Sales –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ —á–µ–∫–∞
            'payment_transaction_id': str,       # ID —á–µ–∫–∞
            'check_sum': float,                  # –°—É–º–º–∞ —á–µ–∫–∞ (–∏–∑ Sales)
            'order_checks_count': int,           # –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —á–µ–∫–æ–≤ —É –∑–∞–∫–∞–∑–∞
            'is_multi_check_order': bool,        # True –µ—Å–ª–∏ —É –∑–∞–∫–∞–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–∫–æ–≤
            'match_confidence': 'high' | 'medium',
            'sum_diff': float,                   # —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ —Å—É–º–º–µ
            'time_diff': float                   # —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        }
    """
    try:
        from models.sales import Sales
        from models.d_order import DOrder
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if verbose_logging:
            print(f"\n{'='*80}")
            print(f"üîç –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø #{transaction_num}")
            print(f"{'='*80}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_dt = parse_transaction_datetime(transaction)
        if not transaction_dt:
            if verbose_logging:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                print(f"   –î–∞—Ç–∞: {transaction.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')}")
                print(f"   –í—Ä–µ–º—è: {transaction.get('–í—Ä–µ–º—è')}")
            return None
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        amount = transaction.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)')
        if not amount:
            if verbose_logging:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return None
        
        try:
            amount = float(amount)
        except (ValueError, TypeError):
            if verbose_logging:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É–º–º—É: {amount}")
            return None
        
        if verbose_logging:
            print(f"\nüìã –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
            print(f"   –î–∞—Ç–∞/–í—Ä–µ–º—è: {transaction_dt.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   –°—É–º–º–∞: {amount:,.2f} —Ç–≥")
            print(f"   –ê–¥—Ä–µ—Å: {transaction.get('–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂')}")
            print(f"   –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {transaction.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏')}")
            print(f"   –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {transaction.get('–¢–∏–ø –æ–ø–ª–∞—Ç—ã')}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º organization_id –ø–æ –∞–¥—Ä–µ—Å—É —Ç–æ—á–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        terminal_address = transaction.get('–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂')
        organization_id = get_organization_id_by_terminal(terminal_address)
        
        if verbose_logging:
            print(f"\nüè™ –ü–æ–∏—Å–∫ organization_id –ø–æ –∞–¥—Ä–µ—Å—É:")
            print(f"   –ê–¥—Ä–µ—Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {terminal_address}")
            if organization_id:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω department_code: {organization_id}")
                print(f"   –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¢–û–õ–¨–ö–û –ø–æ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –º–∞–ø–ø–∏–Ω–≥–µ —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                is_in_mapping = terminal_address and any(
                    addr.lower() == str(terminal_address).strip().lower() 
                    for addr in TERMINAL_ORGANIZATION_MAPPING.keys()
                )
                
                if is_in_mapping:
                    print(f"   ‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –Ω–æ department_code –Ω–µ —É–∫–∞–∑–∞–Ω (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)")
                    print(f"   ‚Üí –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ü–û –í–°–ï–ú –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º")
                else:
                    print(f"   ‚ö†Ô∏è –ê–¥—Ä–µ—Å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –º–∞–ø–ø–∏–Ω–≥–∞")
                    print(f"   ‚Üí –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ü–û –í–°–ï–ú –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º (–º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
                print(f"   üí° –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ TERMINAL_ORGANIZATION_MAPPING")
        
        # 4. –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
        # –°–ª—É—á–∞–π: —á–µ–∫ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18.10 23:55),
        # –∞ –æ–ø–ª–∞—á–µ–Ω –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ —É–∂–µ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19.10 00:10)
        
        if transaction_dt.hour < 4:
            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ø–µ—Ä–≤—ã–µ 4 —á–∞—Å–∞ –¥–Ω—è (00:00 - 03:59)
            # –ò—â–µ–º —á–µ–∫–∏ —Å –≤–µ—á–µ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è (—Å 20:00) –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ + 4 —á–∞—Å–∞
            time_start = (transaction_dt - timedelta(days=1)).replace(hour=16, minute=0, second=0, microsecond=0)
            time_end = transaction_dt.replace(hour=4, minute=0, second=0, microsecond=0)
            search_desc = "—Å –≤–µ—á–µ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è (20:00) –¥–æ 04:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è"
        else:
            # –û–±—ã—á–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è - –∏—â–µ–º –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å + –¥–æ 4 —É—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ
            time_start = transaction_dt.replace(hour=0, minute=0, second=0, microsecond=0)
            time_end = (transaction_dt + timedelta(days=1)).replace(hour=4, minute=0, second=0, microsecond=0)
            search_desc = "–≤–µ—Å—å –¥–µ–Ω—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ + –¥–æ 4 —É—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"
        
        if verbose_logging:
            print(f"\n‚è∞ –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:")
            print(f"   –û—Ç: {time_start.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   –î–æ: {time_end.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"   –ü–æ–∏—Å–∫: {search_desc}")
            print(f"   (–¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —Å–ª—É—á–∞–µ–≤ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏)")
        
        # 5. –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ Sales –ø–æ precheque_time
        query = db.query(Sales).filter(
            Sales.precheque_time.between(time_start, time_end)
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ deleted_with_writeoff - —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        # NOT_DELETED –∏–ª–∏ NULL - —ç—Ç–æ –æ–±—ã—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ –≤ —á–µ–∫
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ (DELETED_WITHOUT_WRITEOFF –∏ —Ç.–¥.) - –∏—Å–∫–ª—é—á–∞–µ–º
        query = query.filter(
            or_(
                Sales.deleted_with_writeoff.is_(None),
                Sales.deleted_with_writeoff == 'NOT_DELETED'
            )
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ organization_id –µ—Å–ª–∏ –µ—Å—Ç—å
        if organization_id:
            query = query.filter(Sales.department_code == organization_id)
        
        sales_records = query.all()
        
        if verbose_logging:
            print(f"\nüîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Sales:")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(sales_records)}")
            print(f"   ‚úÖ –§–∏–ª—å—Ç—Ä: deleted_with_writeoff IS NULL –ò–õ–ò = 'NOT_DELETED' (—Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)")
            print(f"   (–∏—Å–∫–ª—é—á–µ–Ω—ã —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: DELETED_WITHOUT_WRITEOFF, DELETED_WITH_WRITEOFF –∏ —Ç.–¥.)")
            if organization_id:
                print(f"   ‚úÖ –§–∏–ª—å—Ç—Ä: department_code = '{organization_id}'")
            else:
                print(f"   ‚ö†Ô∏è –§–∏–ª—å—Ç—Ä: –ü–û–ò–°–ö –ü–û –í–°–ï–ú –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø–ú (department_code –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª—Å—è)")
                print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ª–æ–∂–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º, –µ—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–µ–∫")
        
        if not sales_records:
            if verbose_logging:
                print(f"\n‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –∑–∞–ø–∏—Å–µ–π –≤ Sales")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: –í —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                nearest_before = db.query(Sales).filter(
                    Sales.precheque_time < time_start
                ).order_by(Sales.precheque_time.desc()).first()
                
                nearest_after = db.query(Sales).filter(
                    Sales.precheque_time > time_end
                ).order_by(Sales.precheque_time.asc()).first()
                
                if nearest_before:
                    diff_minutes = (transaction_dt - nearest_before.precheque_time).total_seconds() / 60
                    print(f"   –ë–ª–∏–∂–∞–π—à–∞—è –ü–ï–†–ï–î: {nearest_before.precheque_time} (—Ä–∞–∑–Ω–∏—Ü–∞: {diff_minutes:.1f} –º–∏–Ω)")
                
                if nearest_after:
                    diff_minutes = (nearest_after.precheque_time - transaction_dt).total_seconds() / 60
                    print(f"   –ë–ª–∏–∂–∞–π—à–∞—è –ü–û–°–õ–ï: {nearest_after.precheque_time} (—Ä–∞–∑–Ω–∏—Ü–∞: {diff_minutes:.1f} –º–∏–Ω)")
            return None
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if verbose_logging and len(sales_records) > 0:
            print(f"\n   üìä –î–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ Sales:")
            for idx, sale in enumerate(sales_records, 1):
                print(f"\n      {idx}. Sales ID: {sale.id}")
                print(f"         Order ID (iiko_id): {sale.order_id}")
                print(f"         Precheque time: {sale.precheque_time}")
                print(f"         Department code: {sale.department_code}")
                print(f"         Organization ID: {sale.organization_id}")
        
        # 6. **–ì–†–£–ü–ü–ò–†–£–ï–ú Sales –ø–æ payment_transaction_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è "—á–µ–∫–æ–≤"**
        if verbose_logging:
            print(f"\n   üìã –ì—Ä—É–ø–ø–∏—Ä—É–µ–º Sales –ø–æ payment_transaction_id (—Å–æ–∑–¥–∞–µ–º —á–µ–∫–∏ –≤ –ø–∞–º—è—Ç–∏)...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ payment_transaction_id (—á–µ–∫–∏)
        from collections import defaultdict
        checks_map = defaultdict(list)  # payment_transaction_id -> List[Sales]
        for sale in sales_records:
            if sale.payment_transaction_id:
                checks_map[sale.payment_transaction_id].append(sale)
        
        # –¢–∞–∫–∂–µ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —á–µ–∫–∏ –ø–æ order_id –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        orders_checks_map = defaultdict(set)  # order_id -> Set[payment_transaction_id]
        for payment_id, sales_list in checks_map.items():
            for sale in sales_list:
                if sale.order_id:
                    orders_checks_map[sale.order_id].add(payment_id)
        
        if verbose_logging:
            print(f"   –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–æ–≤ (payment_transaction_id): {len(checks_map)}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ (order_id): {len(orders_checks_map)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏
            multi_check_orders = {oid: checks for oid, checks in orders_checks_map.items() if len(checks) > 1}
            if multi_check_orders:
                print(f"\n   üì¶ –ó–∞–∫–∞–∑—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏:")
                for order_id, checks in multi_check_orders.items():
                    print(f"      Order {order_id}: {len(checks)} —á–µ–∫–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–∫–æ–≤
            print(f"\n   üìÑ –ü—Ä–∏–º–µ—Ä—ã —á–µ–∫–æ–≤:")
            for idx, (payment_id, sales_list) in enumerate(list(checks_map.items())[:3], 1):
                order_id = sales_list[0].order_id if sales_list else None
                print(f"      {idx}. –ß–µ–∫ {payment_id}: {len(sales_list)} –ø–æ–∑–∏—Ü–∏–π (Sales), order_id={order_id}")
        
        # 7. –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é
        amount_tolerance = amount * (amount_tolerance_percent / 100.0)
        amount_min = amount - amount_tolerance
        amount_max = amount + amount_tolerance
        
        if verbose_logging:
            print(f"\n   üí∞ –ü–æ–∏—Å–∫ —á–µ–∫–∞ –ø–æ —Å—É–º–º–µ:")
            print(f"      –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {amount:,.2f} —Ç–≥")
            print(f"      –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞: {amount_min:,.2f} - {amount_max:,.2f} —Ç–≥")
            print(f"      –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: ¬±{amount_tolerance_percent}%")
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–µ–∫ (payment_transaction_id)
        matching_checks = []
        
        for idx, (payment_id, check_sales) in enumerate(checks_map.items(), 1):
            # –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ–∫–∏ –∑–¥–µ—Å—å - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ compare_terminal_report_with_db
            
            # –°—É–º–º–∏—Ä—É–µ–º dish_discount_sum_int –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã —á–µ–∫–∞ (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫)
            check_sum = sum(float(sale.dish_discount_sum_int or 0) for sale in check_sales)
            sum_diff = abs(check_sum - amount)
            
            # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ –ø–µ—Ä–≤–æ–π Sales –∑–∞–ø–∏—Å–∏
            order_id = check_sales[0].order_id if check_sales else None
            
            if verbose_logging:
                print(f"\n      –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ {idx}/{len(checks_map)}:")
                print(f"         Payment transaction ID: {payment_id}")
                print(f"         Order ID (iiko_id): {order_id}")
                print(f"         –ü–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ (Sales): {len(check_sales)}")
                print(f"         –°—É–º–º–∞ —á–µ–∫–∞ (dish_discount_sum_int): {check_sum:,.2f} —Ç–≥")
                print(f"         –†–∞–∑–Ω–∏—Ü–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º: {sum_diff:,.2f} —Ç–≥")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
            if amount_min <= check_sum <= amount_max:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ d_order
                order = None
                if order_id:
                    order = db.query(DOrder).filter(DOrder.iiko_id == order_id).first()
                
                if order:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —á–µ–∫–æ–≤ —É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                    order_checks_count = len(orders_checks_map.get(order_id, set()))
                    is_multi_check = order_checks_count > 1
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    if check_sales:
                        sale = check_sales[0]
                        time_diff_seconds = abs((sale.precheque_time - transaction_dt).total_seconds())
                    else:
                        time_diff_seconds = float('inf')
                    
                    matching_checks.append({
                        'order': order,
                        'check_sales': check_sales,
                        'payment_transaction_id': payment_id,
                        'check_sum': check_sum,
                        'order_checks_count': order_checks_count,
                        'is_multi_check_order': is_multi_check,
                        'sum_diff': sum_diff,
                        'time_diff': time_diff_seconds
                    })
                    
                    if verbose_logging:
                        print(f"         ‚úÖ –°—É–º–º–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç! –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ d_order")
                        print(f"         Order ID (–ë–î): {order.id}")
                        print(f"         –ß–µ–∫–æ–≤ —É –∑–∞–∫–∞–∑–∞: {order_checks_count}")
                        if is_multi_check:
                            print(f"         üì¶ –ó–∞–∫–∞–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏!")
                else:
                    if verbose_logging:
                        print(f"         ‚ö†Ô∏è –°—É–º–º–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç, –Ω–æ –∑–∞–∫–∞–∑ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ d_order")
            else:
                if verbose_logging:
                    print(f"         ‚ùå –°—É–º–º–∞ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)")
        
        if not matching_checks:
            if verbose_logging:
                print(f"\n   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤ –ø–æ —Å—É–º–º–µ")
                print(f"      –ü—Ä–∏—á–∏–Ω–∞: –ù–∏ –æ–¥–∏–Ω —á–µ–∫ –Ω–µ –∏–º–µ–µ—Ç —Å—É–º–º—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {amount_min:,.2f} - {amount_max:,.2f} —Ç–≥")
            return None
        
        # 9. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ
        if len(matching_checks) > 1:
            if verbose_logging:
                print(f"\n   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û –ù–ï–°–ö–û–õ–¨–ö–û ({len(matching_checks)}) –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤")
                print(f"   üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤:")
                for i, match in enumerate(matching_checks, 1):
                    check = match['check_sales'][0] if match['check_sales'] else None
                    if check:
                        time_diff_minutes = match['time_diff'] / 60
                        print(f"\n      –í–∞—Ä–∏–∞–Ω—Ç {i}:")
                        print(f"         Payment ID: {match['payment_transaction_id']}")
                        print(f"         Order ID: {match['order'].id} (iiko_id: {match['order'].iiko_id})")
                        print(f"         –°—É–º–º–∞ —á–µ–∫–∞: {match['check_sum']:,.2f} —Ç–≥")
                        print(f"         –†–∞–∑–Ω–∏—Ü–∞: {match['sum_diff']:,.2f} —Ç–≥")
                        print(f"         –†–∞–∑–Ω–∏—Ü–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {time_diff_minutes:.1f} –º–∏–Ω")
                        if match['is_multi_check_order']:
                            print(f"         üì¶ –ó–∞–∫–∞–∑ —Å {match['order_checks_count']} —á–µ–∫–∞–º–∏")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ —Å—É–º–º—ã, –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            matching_checks.sort(key=lambda x: (x['sum_diff'], x['time_diff']))
            
            best_match = matching_checks[0]
            best_match['match_confidence'] = 'medium'
            
            if verbose_logging:
                print(f"\n   üéØ –í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:")
                print(f"      Payment ID: {best_match['payment_transaction_id']}")
                print(f"      Order ID: {best_match['order'].id}")
                print(f"      –°—É–º–º–∞ —á–µ–∫–∞: {best_match['check_sum']:,.2f} —Ç–≥")
                print(f"      –†–∞–∑–Ω–∏—Ü–∞: {best_match['sum_diff']:,.2f} —Ç–≥")
                if best_match['is_multi_check_order']:
                    print(f"      üì¶ –ó–∞–∫–∞–∑ —Å {best_match['order_checks_count']} —á–µ–∫–∞–º–∏")
                print(f"\n‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: medium)")
        else:
            # 10. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - —ç—Ç–æ —É—Å–ø–µ—Ö
            best_match = matching_checks[0]
            best_match['match_confidence'] = 'high'
            
            if verbose_logging:
                print(f"\n   ‚úÖ –ù–∞–π–¥–µ–Ω –û–î–ò–ù –ø–æ–¥—Ö–æ–¥—è—â–∏–π —á–µ–∫")
                print(f"   üéØ –î–µ—Ç–∞–ª–∏:")
                print(f"      Payment ID: {best_match['payment_transaction_id']}")
                print(f"      Order ID: {best_match['order'].id} (iiko_id: {best_match['order'].iiko_id})")
                print(f"      –°—É–º–º–∞ —á–µ–∫–∞: {best_match['check_sum']:,.2f} —Ç–≥")
                print(f"      –†–∞–∑–Ω–∏—Ü–∞: {best_match['sum_diff']:,.2f} —Ç–≥")
                if best_match['is_multi_check_order']:
                    print(f"      üì¶ –ó–∞–∫–∞–∑ —Å {best_match['order_checks_count']} —á–µ–∫–∞–º–∏")
                print(f"\n‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: high)")
        
        return best_match
        
    except Exception as e:
        if verbose_logging:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î: {e}")
            import traceback
            traceback.print_exc()
        return None


def calculate_commission(transaction: Dict[str, Any]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.
    
    Args:
        transaction: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        
    Returns:
        –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏ (–ø–æ –º–æ–¥—É–ª—é)
    """
    commission = 0.0
    
    # –ë–µ—Ä–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏
    commission_fields = [
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–µ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è Kaspi Travel (—Ç)'
    ]
    
    for field in commission_fields:
        value = transaction.get(field)
        if value:
            try:
                commission += abs(float(value))
            except (ValueError, TypeError):
                pass
    
    return commission


def update_order_commission(
    order_id: int,
    commission: float,
    db: Session,
    terminal_transaction: Optional[Dict[str, Any]] = None,
    check_info: Optional[Dict[str, Any]] = None,
    operation_type: str = "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
) -> Dict[str, Any]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ bank_commission –≤ —Ç–∞–±–ª–∏—Ü–µ d_order.
    
    Args:
        order_id: ID –∑–∞–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ d_order
        commission: –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏
        db: SQLAlchemy —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        terminal_transaction: –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (–¥–ª—è –ª–æ–≥–∞)
        check_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–µ (–¥–ª—è –ª–æ–≥–∞)
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏:
        {
            'success': bool,
            'order_id': int,
            'order_iiko_id': str,
            'commission_amount': float,
            'previous_commission': float,
            'new_commission': float,
            'operation_type': str,
            'terminal_transaction': dict,
            'check_info': dict,
            'timestamp': str,
            'error': str (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞)
        }
    """
    result = {
        'success': False,
        'order_id': order_id,
        'order_iiko_id': None,
        'commission_amount': commission,
        'previous_commission': None,
        'new_commission': None,
        'operation_type': operation_type,
        'terminal_transaction': terminal_transaction or {},
        'check_info': check_info or {},
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'error': None
    }
    
    try:
        from models.d_order import DOrder
        
        order = db.query(DOrder).filter(DOrder.id == order_id).first()
        
        if not order:
            result['error'] = f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            return result
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–∏—Å—Å–∏—é
        previous_commission = float(order.bank_commission or 0)
        result['previous_commission'] = previous_commission
        result['order_iiko_id'] = order.iiko_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é
        order.bank_commission = commission
        db.commit()
        
        result['new_commission'] = commission
        result['success'] = True
        
        return result
        
    except Exception as e:
        result['error'] = str(e)
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏: {e}")
        db.rollback()
        return result


def compare_terminal_report_with_db(
    file_path: str,
    db: Session,
    time_tolerance_minutes: int = 15,
    amount_tolerance_percent: float = 1.0,
    write_commissions: bool = False,
    verbose: bool = True,
    limit: Optional[int] = None,
    date_from: Optional[int] = None,
    date_to: Optional[int] = None,
    save_all_transactions_to: Optional[str] = None,
    save_commission_log_to: Optional[str] = None
) -> Dict[str, Any]:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤ –ë–î.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –î–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º organization_id –ø–æ –∞–¥—Ä–µ—Å—É —Ç–æ—á–∫–∏
    2. –ò—â–µ–º –≤ Sales –ø–æ precheque_time –∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:
       - –û—Ç 00:00:00 –¥–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
       - –î–æ 04:00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
       (—ç—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ —á–µ–∫ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –≤–µ—á–µ—Ä–æ–º, –∞ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏)
    3. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ deleted_with_writeoff (—Ç–æ–ª—å–∫–æ NOT_DELETED –∏–ª–∏ NULL)
       –ò—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (DELETED_WITHOUT_WRITEOFF, DELETED_WITH_WRITEOFF)
    4. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ organization_id
    5. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º Sales –ø–æ payment_transaction_id –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—ã (¬±1%)
    6. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –ù–ï–°–ö–û–õ–¨–ö–û –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ - –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π:
       - –ü–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ –ø–æ —Å—É–º–º–µ
       - –ü—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ —Å—É–º–º - –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    7. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ d_order.bank_commission
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        db: SQLAlchemy —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        time_tolerance_minutes: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API)
        amount_tolerance_percent: –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—É–º–º–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0%)
        write_commissions: –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–∏ –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        limit: –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        date_from: –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 13
        date_to: –ö–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 18
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:
        {
            'total_transactions': int,           # –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ç—á–µ—Ç–µ
            'matched': int,                      # –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –ë–î
            'not_matched': int,                  # –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î
            'match_percentage': float,           # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            'commissions_written': int,          # –ó–∞–ø–∏—Å–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π (–µ—Å–ª–∏ write_commissions=True)
            'matched_transactions': list,        # –°–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            'not_matched_transactions': list,    # –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        }
    """
    # –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    data = parse_terminal_report(file_path)
    transactions = data['transactions']
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω
    if date_from is not None or date_to is not None:
        filtered_transactions = []
        for transaction in transactions:
            date_str = transaction.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
            if date_str:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    if isinstance(date_str, str):
                        # –§–æ—Ä–º–∞—Ç DD.MM.YYYY
                        parts = date_str.split('.')
                        if len(parts) == 3:
                            day = int(parts[0])
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                            if date_from is not None and day < date_from:
                                continue
                            if date_to is not None and day > date_to:
                                continue
                            filtered_transactions.append(transaction)
                    elif isinstance(date_str, (datetime, pd.Timestamp)):
                        day = date_str.day
                        if date_from is not None and day < date_from:
                            continue
                        if date_to is not None and day > date_to:
                            continue
                        filtered_transactions.append(transaction)
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    pass
        
        if verbose:
            print(f"\nüìÖ –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: {date_from if date_from else 1} - {date_to if date_to else 31} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞")
            print(f"   –î–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        transactions = filtered_transactions
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –µ—Å–ª–∏ –∑–∞–¥–∞–Ω limit
    if limit and limit > 0:
        transactions = transactions[:limit]
    
    matched_transactions = []
    not_matched_transactions = []
    commissions_written = 0
    commission_records = []  # –î–ª—è –ª–æ–≥ —Ñ–∞–π–ª–∞
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —á–µ–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    processed_transactions = set()  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    used_payment_transactions = set()  # –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ payment_transaction_id –∏–∑ –ë–î
    processed_orders = set()  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏)
    
    if verbose:
        print("\n" + "=" * 80)
        print("üîç –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –¢–ï–†–ú–ò–ù–ê–õ–ê –° –ó–ê–ö–ê–ó–ê–ú–ò –í –ë–î")
        print("=" * 80)
        print(f"\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")
        print(f"  - –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: –¥–µ–Ω—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (00:00) + –¥–æ 04:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è")
        print(f"    (–ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏)")
        print(f"  - –ü–æ–∏—Å–∫ –ø–æ —Å—É–º–º–µ: —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é ¬±{amount_tolerance_percent}%")
        print(f"  - –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ª—É—á—à–∏–π (–ø–æ —Å—É–º–º–µ, –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏)")
        print(f"  - –ü–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ë–î: precheque_time –≤ —Ç–∞–±–ª–∏—Ü–µ Sales")
        print(f"  - –ó–∞–ø–∏—Å—å –∫–æ–º–∏—Å—Å–∏–π: {'–î–ê' if write_commissions else '–ù–ï–¢'}")
        print(f"  - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: –∫–∞–∂–¥–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑")
        print(f"  - –ó–∞–∫–∞–∑—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏: –∫–æ–º–∏—Å—Å–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑")
        print(f"\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...\n")
    
    for idx, transaction in enumerate(transactions, 1):
        if not verbose and idx % 10 == 0:  # –ö–æ—Ä–æ—Ç–∫–∏–µ –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ verbose –≤—ã–∫–ª—é—á–µ–Ω
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        transaction_key = f"{transaction.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')}_{transaction.get('–í—Ä–µ–º—è')}_{transaction.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)')}_{transaction.get('–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂')}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if transaction_key in processed_transactions:
            if verbose:
                print(f"\n‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{idx} –ø—Ä–æ–ø—É—â–µ–Ω–∞ - —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–∞–Ω–µ–µ")
                print(f"   –ö–ª—é—á: {transaction_key}")
            continue
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
        match = match_transaction_with_order(
            transaction,
            db,
            time_tolerance_minutes,
            amount_tolerance_percent,
            verbose_logging=verbose,  # –ü–µ—Ä–µ–¥–∞–µ–º verbose –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            transaction_num=idx,
            used_payment_transactions=used_payment_transactions  # –ü–µ—Ä–µ–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤
        )
        
        if match:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —á–µ–∫
            if match['payment_transaction_id'] in used_payment_transactions:
                if verbose:
                    print(f"\n‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{idx} –ø—Ä–æ–ø—É—â–µ–Ω–∞ - —á–µ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
                    print(f"   Payment ID: {match['payment_transaction_id']}")
                not_matched_transactions.append({
                    'terminal_transaction': transaction,
                    'comment': '–ß–µ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π',
                    'match_confidence': 'skipped_used_check'
                })
                continue
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
            processed_transactions.add(transaction_key)
            # –û—Ç–º–µ—á–∞–µ–º —á–µ–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            used_payment_transactions.add(match['payment_transaction_id'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
            matched_transactions.append({
                'terminal_transaction': transaction,
                'order': match['order'],
                'check_sales': match['check_sales'],
                'payment_transaction_id': match['payment_transaction_id'],
                'check_sum': match['check_sum'],
                'is_multi_check_order': match.get('is_multi_check_order', False),
                'order_checks_count': match.get('order_checks_count', 1),
                'match_confidence': match['match_confidence']
            })
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if write_commissions:
                commission = calculate_commission(transaction)
                if commission > 0:
                    order = match['order']
                    is_multi_check = match.get('is_multi_check_order', False)
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ –¥–ª—è –ª–æ–≥–∞
                    check_info = {
                        'payment_transaction_id': match['payment_transaction_id'],
                        'check_sum': match['check_sum'],
                        'sales_count': len(match['check_sales']),
                        'is_multi_check': is_multi_check
                    }
                    
                    # –î–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    # (–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–≤–æ–≥–æ —á–µ–∫–∞), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    if is_multi_check:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                        order_id = order.id
                        if order_id not in processed_orders:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º processed_orders –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
                            # –ó–∞–∫–∞–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                            existing_commission = float(order.bank_commission or 0)
                            total_commission = existing_commission + commission
                            
                            result = update_order_commission(
                                order.id,
                                total_commission,
                                db,
                                terminal_transaction=transaction,
                                check_info=check_info,
                                operation_type="—Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
                            )
                            if result['success']:
                                commissions_written += 1
                                commission_records.append(result)
                                processed_orders.add(order_id)  # –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                    else:
                        # –ó–∞–∫–∞–∑ —Å –æ–¥–Ω–∏–º —á–µ–∫–æ–º - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
                        result = update_order_commission(
                            order.id,
                            commission,
                            db,
                            terminal_transaction=transaction,
                            check_info=check_info,
                            operation_type="–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
                        )
                        if result['success']:
                            commissions_written += 1
                            commission_records.append(result)
        else:
            not_matched_transactions.append({
                'terminal_transaction': transaction,
                'comment': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–µ–∫–æ–≤',
                'match_confidence': 'no_match'
            })
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = len(transactions)
    matched = len(matched_transactions)
    not_matched = len(not_matched_transactions)
    match_percentage = (matched / total * 100) if total > 0 else 0
    
    result = {
        'total_transactions': total,
        'matched': matched,
        'not_matched': not_matched,
        'match_percentage': match_percentage,
        'commissions_written': commissions_written,
        'matched_transactions': matched_transactions,
        'not_matched_transactions': not_matched_transactions,
        'terminal_total_amount': data['total_amount'],
        'terminal_total_commission': data['total_commission'],
        'commission_records': commission_records,  # –î–ª—è –ª–æ–≥ —Ñ–∞–π–ª–∞
    }
    
    if verbose:
        print("\n" + "=" * 80)
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 80)
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –ë–î: {matched} ({match_percentage:.1f}%)")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: {not_matched} ({100 - match_percentage:.1f}%)")
        print(f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total}")
        
        if write_commissions:
            print(f"\nüíæ –ó–∞–ø–∏—Å–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {commissions_written}")
        
        print(f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:")
        print(f"  - –û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {data['total_amount']:,.2f} —Ç–≥")
        print(f"  - –ö–æ–º–∏—Å—Å–∏—è: {data['total_commission']:,.2f} —Ç–≥")
        print(f"  - –ö –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {data['total_to_credit']:,.2f} —Ç–≥")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if matched_transactions:
            print(f"\n‚úÖ –ü–†–ò–ú–ï–†–´ –ù–ê–ô–î–ï–ù–ù–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô (–ø–µ—Ä–≤—ã–µ 3):")
            for i, match in enumerate(matched_transactions[:3], 1):
                trans = match['terminal_transaction']
                order = match['order']
                check_sales = match['check_sales']
                payment_id = match['payment_transaction_id']
                check_sum = match['check_sum']
                confidence = match['match_confidence']
                is_multi_check = match.get('is_multi_check_order', False)
                checks_count = match.get('order_checks_count', 1)
                
                print(f"\n  –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ #{i} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}):")
                if is_multi_check:
                    print(f"    üì¶ –ó–ê–ö–ê–ó –° –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –ß–ï–ö–ê–ú–ò: {checks_count} —á–µ–∫–æ–≤")
                print(f"    –¢–µ—Ä–º–∏–Ω–∞–ª:")
                print(f"      –î–∞—Ç–∞/–í—Ä–µ–º—è: {trans.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')} {trans.get('–í—Ä–µ–º—è')}")
                print(f"      –°—É–º–º–∞: {trans.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)')} —Ç–≥")
                print(f"      –ê–¥—Ä–µ—Å: {trans.get('–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂')}")
                print(f"    –ß–µ–∫ (payment_transaction_id):")
                print(f"      ID: {payment_id}")
                print(f"      –°—É–º–º–∞ —á–µ–∫–∞: {check_sum:.2f} —Ç–≥")
                print(f"      –ü–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ (Sales): {len(check_sales)}")
                if check_sales:
                    sales = check_sales[0]
                    print(f"      Precheque time: {sales.precheque_time}")
                print(f"    –ó–∞–∫–∞–∑ (Order):")
                print(f"      Order ID: {order.id} (iiko_id: {order.iiko_id})")
                print(f"      –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.sum_order} —Ç–≥")
                if write_commissions and order.bank_commission:
                    print(f"      –ö–æ–º–∏—Å—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: {order.bank_commission} —Ç–≥")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if not_matched_transactions:
            print(f"\n‚ùå –ü–†–ò–ú–ï–†–´ –ù–ï –ù–ê–ô–î–ï–ù–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–ø–µ—Ä–≤—ã–µ 3):")
            for i, trans in enumerate(not_matched_transactions[:3], 1):
                print(f"\n  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{i}:")
                print(f"    –î–∞—Ç–∞/–í—Ä–µ–º—è: {trans.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')} {trans.get('–í—Ä–µ–º—è')}")
                print(f"    –°—É–º–º–∞: {trans.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)')} —Ç–≥")
                print(f"    –ê–¥—Ä–µ—Å: {trans.get('–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂')}")
                print(f"    –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {trans.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏')}")
                print(f"    –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {trans.get('–¢–∏–ø –æ–ø–ª–∞—Ç—ã')}")
        
        print("\n" + "=" * 80)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if save_all_transactions_to:
        print("\n" + "=" * 80)
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê –û –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = {
            'source_file': file_path,
            'processing_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_transactions': total,
            'matched': matched,
            'not_matched': not_matched,
            'match_percentage': match_percentage,
            'commissions_written': commissions_written,
            'parameters': {
                'amount_tolerance_percent': amount_tolerance_percent,
                'date_from': date_from,
                'date_to': date_to,
                'write_commissions': write_commissions
            }
        }
        
        success = save_all_transactions_report(
            matched_transactions,
            not_matched_transactions,
            save_all_transactions_to,
            metadata
        )
        
        if success:
            print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö")
            print(f"   –°–æ–≤–ø–∞–≤—à–∏—Ö: {matched}")
            print(f"   –ù–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö: {not_matched}")
            print(f"   –§–∞–π–ª: {save_all_transactions_to}")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö")
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –∫–æ–º–∏—Å—Å–∏–π –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if save_commission_log_to and commission_records:
        print("\n" + "=" * 80)
        print("üìù –°–û–ó–î–ê–ù–ò–ï –õ–û–ì –§–ê–ô–õ–ê –ö–û–ú–ò–°–°–ò–ô")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∞
        log_metadata = {
            'source_file': file_path,
            'processing_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_commission_records': len(commission_records),
            'total_commission_amount': sum(float(r.get('commission_amount', 0)) for r in commission_records),
            'parameters': {
                'amount_tolerance_percent': amount_tolerance_percent,
                'date_from': date_from,
                'date_to': date_to,
                'write_commissions': write_commissions
            }
        }
        
        success = create_commission_log_file(
            save_commission_log_to,
            commission_records,
            log_metadata
        )
        
        if success:
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω –ª–æ–≥ —Ñ–∞–π–ª –∫–æ–º–∏—Å—Å–∏–π")
            print(f"   –ó–∞–ø–∏—Å–µ–π –∫–æ–º–∏—Å—Å–∏–π: {len(commission_records)}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {sum(float(r.get('commission_amount', 0)) for r in commission_records):,.2f} —Ç–≥")
            print(f"   –§–∞–π–ª: {save_commission_log_to}")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª –∫–æ–º–∏—Å—Å–∏–π")
    
    return result


def save_not_matched_transactions(
    not_matched_transactions: List[Dict[str, Any]],
    output_file: str,
    metadata: Optional[Dict[str, Any]] = None
) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ JSON —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    
    Args:
        not_matched_transactions: –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç.–¥.)
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        def convert_for_json(obj):
            if isinstance(obj, (datetime, pd.Timestamp)):
                return obj.strftime('%Y-%m-%d %H:%M:%S')
            elif isinstance(obj, pd.Series):
                return obj.to_dict()
            elif isinstance(obj, (list, tuple)):
                return [convert_for_json(item) for item in obj]
            elif isinstance(obj, dict):
                return {k: convert_for_json(v) for k, v in obj.items()}
            elif hasattr(obj, '__dict__'):
                # –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ SQLAlchemy –º–æ–¥–µ–ª–µ–π
                return {k: convert_for_json(v) for k, v in obj.__dict__.items() if not k.startswith('_')}
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫–∞–ª—è—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                try:
                    if pd.isna(obj):
                        return None
                except (ValueError, TypeError):
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ NaN, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    pass
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Decimal –æ–±—ä–µ–∫—Ç—ã
                from decimal import Decimal
                if isinstance(obj, Decimal):
                    return float(obj)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º date –æ–±—ä–µ–∫—Ç—ã
                from datetime import date
                if isinstance(obj, date):
                    return obj.strftime('%Y-%m-%d')
                
                return obj
        
        # –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
        cleaned_transactions = []
        for trans in not_matched_transactions:
            cleaned_trans = {}
            for key, value in trans.items():
                cleaned_trans[key] = convert_for_json(value)
            cleaned_transactions.append(cleaned_trans)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_data = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_not_matched': len(cleaned_transactions),
            'metadata': metadata or {},
            'not_matched_transactions': cleaned_transactions
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_dir = os.path.dirname(output_file)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False


def save_all_transactions_report(
    matched_transactions: List[Dict[str, Any]],
    not_matched_transactions: List[Dict[str, Any]],
    output_file: str,
    metadata: Optional[Dict[str, Any]] = None
) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö (—Å–æ–≤–ø–∞–≤—à–∏—Ö –∏ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö) –≤ JSON —Ñ–∞–π–ª.
    
    Args:
        matched_transactions: –°–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö
        not_matched_transactions: –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç.–¥.)
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        def convert_for_json(obj):
            if isinstance(obj, (datetime, pd.Timestamp)):
                return obj.strftime('%Y-%m-%d %H:%M:%S')
            elif isinstance(obj, pd.Series):
                return obj.to_dict()
            elif isinstance(obj, (list, tuple)):
                return [convert_for_json(item) for item in obj]
            elif isinstance(obj, dict):
                return {k: convert_for_json(v) for k, v in obj.items()}
            elif hasattr(obj, '__dict__'):
                # –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ SQLAlchemy –º–æ–¥–µ–ª–µ–π
                return {k: convert_for_json(v) for k, v in obj.__dict__.items() if not k.startswith('_')}
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫–∞–ª—è—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                try:
                    if pd.isna(obj):
                        return None
                except (ValueError, TypeError):
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ NaN, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    pass
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Decimal –æ–±—ä–µ–∫—Ç—ã
                from decimal import Decimal
                if isinstance(obj, Decimal):
                    return float(obj)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º date –æ–±—ä–µ–∫—Ç—ã
                from datetime import date
                if isinstance(obj, date):
                    return obj.strftime('%Y-%m-%d')
                
                return obj
        
        # –û—á–∏—â–∞–µ–º —Å–æ–≤–ø–∞–≤—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cleaned_matched = []
        for match in matched_transactions:
            cleaned_match = {}
            for key, value in match.items():
                if key == 'terminal_transaction':
                    # –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
                    cleaned_trans = {}
                    for k, v in value.items():
                        cleaned_trans[k] = convert_for_json(v)
                    cleaned_match[key] = cleaned_trans
                elif key == 'order':
                    # –û—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
                    cleaned_match[key] = convert_for_json(value)
                elif key == 'check_sales':
                    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ Sales –∑–∞–ø–∏—Å–µ–π
                    cleaned_sales = []
                    for sale in value:
                        cleaned_sales.append(convert_for_json(sale))
                    cleaned_match[key] = cleaned_sales
                else:
                    cleaned_match[key] = convert_for_json(value)
            cleaned_matched.append(cleaned_match)
        
        # –û—á–∏—â–∞–µ–º –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cleaned_not_matched = []
        for trans in not_matched_transactions:
            cleaned_trans = {}
            for key, value in trans.items():
                cleaned_trans[key] = convert_for_json(value)
            cleaned_not_matched.append(cleaned_trans)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_data = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'summary': {
                'total_matched': len(cleaned_matched),
                'total_not_matched': len(cleaned_not_matched),
                'total_transactions': len(cleaned_matched) + len(cleaned_not_matched),
                'match_percentage': (len(cleaned_matched) / (len(cleaned_matched) + len(cleaned_not_matched)) * 100) if (len(cleaned_matched) + len(cleaned_not_matched)) > 0 else 0
            },
            'metadata': metadata or {},
            'matched_transactions': cleaned_matched,
            'not_matched_transactions': cleaned_not_matched
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_dir = os.path.dirname(output_file)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False


def create_commission_log_file(
    log_file_path: str,
    commission_records: List[Dict[str, Any]],
    metadata: Optional[Dict[str, Any]] = None
) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –ª–æ–≥ —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∏—Å—Å–∏–π –≤ d_order.
    
    Args:
        log_file_path: –ü—É—Ç—å –∫ –ª–æ–≥ —Ñ–∞–π–ª—É
        commission_records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
        metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏—Å—Ç–æ—á–Ω–∏–∫, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç.–¥.)
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        log_dir = os.path.dirname(log_file_path)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥ —Ñ–∞–π–ª–∞
        log_content = []
        log_content.append("=" * 80)
        log_content.append("–õ–û–ì –ó–ê–ü–ò–°–ò –ö–û–ú–ò–°–°–ò–ô –í D_ORDER")
        log_content.append("=" * 80)
        log_content.append(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        log_content.append("")
        
        if metadata:
            log_content.append("–ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
            log_content.append("-" * 40)
            for key, value in metadata.items():
                log_content.append(f"{key}: {value}")
            log_content.append("")
        
        log_content.append(f"–í–°–ï–ì–û –ó–ê–ü–ò–°–ï–ô –ö–û–ú–ò–°–°–ò–ô: {len(commission_records)}")
        log_content.append("")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∫–æ–º–∏—Å—Å–∏–∏
        for idx, record in enumerate(commission_records, 1):
            log_content.append(f"–ó–ê–ü–ò–°–¨ #{idx}")
            log_content.append("-" * 40)
            log_content.append(f"Order ID (d_order.id): {record.get('order_id')}")
            log_content.append(f"Order iiko_id: {record.get('order_iiko_id')}")
            log_content.append(f"–ö–æ–º–∏—Å—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: {record.get('commission_amount')} —Ç–≥")
            log_content.append(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: {record.get('previous_commission', '–Ω–µ –±—ã–ª–æ')} —Ç–≥")
            log_content.append(f"–ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: {record.get('new_commission')} —Ç–≥")
            log_content.append(f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {record.get('operation_type', '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ')}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            terminal_info = record.get('terminal_transaction', {})
            if terminal_info:
                log_content.append("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:")
                log_content.append(f"  –î–∞—Ç–∞/–í—Ä–µ–º—è: {terminal_info.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')} {terminal_info.get('–í—Ä–µ–º—è')}")
                log_content.append(f"  –°—É–º–º–∞: {terminal_info.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)')} —Ç–≥")
                log_content.append(f"  –ê–¥—Ä–µ—Å: {terminal_info.get('–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂')}")
                log_content.append(f"  –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {terminal_info.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏')}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–µ
            check_info = record.get('check_info', {})
            if check_info:
                log_content.append("–ß–µ–∫:")
                log_content.append(f"  Payment transaction ID: {check_info.get('payment_transaction_id')}")
                log_content.append(f"  –°—É–º–º–∞ —á–µ–∫–∞: {check_info.get('check_sum')} —Ç–≥")
                log_content.append(f"  –ü–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ: {check_info.get('sales_count')}")
                log_content.append(f"  –ó–∞–∫–∞–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏: {'–î–∞' if check_info.get('is_multi_check') else '–ù–µ—Ç'}")
            
            log_content.append(f"–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {record.get('timestamp', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}")
            log_content.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_commission = sum(float(r.get('commission_amount', 0)) for r in commission_records)
        log_content.append("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        log_content.append("-" * 40)
        log_content.append(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(commission_records)}")
        log_content.append(f"–û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: {total_commission:,.2f} —Ç–≥")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
        operation_stats = {}
        for record in commission_records:
            op_type = record.get('operation_type', '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ')
            operation_stats[op_type] = operation_stats.get(op_type, 0) + 1
        
        if operation_stats:
            log_content.append("–ü–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:")
            for op_type, count in operation_stats.items():
                log_content.append(f"  {op_type}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        log_content.append("")
        log_content.append("=" * 80)
        log_content.append("–ö–û–ù–ï–¶ –õ–û–ì–ê")
        log_content.append("=" * 80)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(log_file_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(log_content))
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥ —Ñ–∞–π–ª–∞ –∫–æ–º–∏—Å—Å–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False


def process_and_write_commissions(
    file_path: str,
    db: Session,
    terminal_org_mapping: Dict[str, int],
    time_tolerance_minutes: int = 15,
    amount_tolerance_percent: float = 1.0,
    dry_run: bool = True,
    verbose: bool = False,
    limit: Optional[int] = None,
    date_from: Optional[int] = None,
    date_to: Optional[int] = None,
    save_not_matched_to: Optional[str] = None,
    save_all_transactions_to: Optional[str] = None,
    save_commission_log_to: Optional[str] = None
) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ë–î.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        db: SQLAlchemy —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        terminal_org_mapping: –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π {–∞–¥—Ä–µ—Å_—Ç–µ—Ä–º–∏–Ω–∞–ª–∞: organization_id}
        time_tolerance_minutes: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API)
        amount_tolerance_percent: –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—É–º–º–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0%)
        dry_run: –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        verbose: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        limit: –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        date_from: –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 13
        date_to: –ö–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 18
        save_not_matched_to: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        save_all_transactions_to: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        save_commission_log_to: –ü—É—Ç—å –∫ –ª–æ–≥ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö –≤ d_order (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    global TERMINAL_ORGANIZATION_MAPPING
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
    TERMINAL_ORGANIZATION_MAPPING.update(terminal_org_mapping)
    
    print("\n" + "=" * 80)
    print("üíæ –ó–ê–ü–ò–°–¨ –ö–û–ú–ò–°–°–ò–ô –ò–ó –û–¢–ß–ï–¢–ê –¢–ï–†–ú–ò–ù–ê–õ–ê –í –ë–î")
    print("=" * 80)
    
    if dry_run:
        print("\n‚ö†Ô∏è  –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (dry_run=True) - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")
    else:
        print("\n‚úÖ –†–ï–ñ–ò–ú –ó–ê–ü–ò–°–ò (dry_run=False) - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–£–î–£–¢ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")
    
    print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–æ—á–µ–∫:")
    for terminal_addr, org_id in terminal_org_mapping.items():
        print(f"  ‚Ä¢ {terminal_addr} ‚Üí Department Code: {org_id}")
    
    if verbose:
        print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û")
    
    if limit:
        print(f"\n‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {limit} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    if date_from is not None or date_to is not None:
        print(f"\nüìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: {date_from if date_from else 1} - {date_to if date_to else 31} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    result = compare_terminal_report_with_db(
        file_path,
        db,
        time_tolerance_minutes=time_tolerance_minutes,
        amount_tolerance_percent=amount_tolerance_percent,
        write_commissions=not dry_run,  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ dry_run
        verbose=verbose,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        limit=limit,
        date_from=date_from,
        date_to=date_to,
        save_all_transactions_to=save_all_transactions_to,
        save_commission_log_to=save_commission_log_to
    )
    
    if dry_run:
        print("\n" + "=" * 80)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        print("=" * 80)
        print(f"\n–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ë–î, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º:")
        print(f"  dry_run=False")
        print(f"\n–≠—Ç–æ –∑–∞–ø–∏—à–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è {result['matched']} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    else:
        print("\n" + "=" * 80)
        print("‚úÖ –ö–û–ú–ò–°–°–ò–ò –ó–ê–ü–ò–°–ê–ù–´ –í –ë–î")
        print("=" * 80)
        print(f"\n–ó–∞–ø–∏—Å–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {result['commissions_written']} –∏–∑ {result['matched']} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ JSON –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if save_not_matched_to and result['not_matched_transactions']:
        print("\n" + "=" * 80)
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ï–°–û–í–ü–ê–í–®–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = {
            'source_file': file_path,
            'processing_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_transactions': result['total_transactions'],
            'matched': result['matched'],
            'not_matched': result['not_matched'],
            'match_percentage': result['match_percentage'],
            'parameters': {
                'amount_tolerance_percent': amount_tolerance_percent,
                'date_from': date_from,
                'date_to': date_to,
                'dry_run': dry_run
            }
        }
        
        success = save_not_matched_transactions(
            result['not_matched_transactions'],
            save_not_matched_to,
            metadata
        )
        
        if success:
            print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {result['not_matched']} –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            print(f"   –§–∞–π–ª: {save_not_matched_to}")
        else:
            print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    
    return result


def parse_terminals_directory(
    directory_path: str,
    file_pattern: str = "*.xlsx",
    verbose: bool = True,
    date_from: Optional[int] = None,
    date_to: Optional[int] = None
) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–∞—Ä—Å–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.
    
    Args:
        directory_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏
        file_pattern: –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "*.xlsx")
        verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        date_from: –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 13
        date_to: –ö–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 18
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
        {
            'total_files': int,              # –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            'success_files': int,            # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            'failed_files': int,             # –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            'total_transactions': int,       # –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            'total_amount': float,           # –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            'total_commission': float,       # –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
            'reports': list,                 # –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            'failed_reports': list,          # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
            'report_types_stats': dict       # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ç—á–µ—Ç–æ–≤
        }
    """
    import glob
    
    if not os.path.exists(directory_path):
        raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}")
    
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ —à–∞–±–ª–æ–Ω—É
    search_pattern = os.path.join(directory_path, file_pattern)
    files = glob.glob(search_pattern)
    
    if verbose:
        print("\n" + "=" * 80)
        print("üìÇ –ü–ê–†–°–ò–ù–ì –ü–ê–ü–ö–ò –° –û–¢–ß–ï–¢–ê–ú–ò –¢–ï–†–ú–ò–ù–ê–õ–û–í")
        print("=" * 80)
        print(f"\nüìÅ –ü–∞–ø–∫–∞: {directory_path}")
        print(f"üîç –®–∞–±–ª–æ–Ω: {file_pattern}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        if date_from is not None or date_to is not None:
            print(f"üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: {date_from if date_from else 1} - {date_to if date_to else 31} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞")
        print()
    
    reports = []
    failed_reports = []
    total_transactions = 0
    total_amount = 0.0
    total_commission = 0.0
    report_types_stats = {}
    
    for idx, file_path in enumerate(files, 1):
        file_name = os.path.basename(file_path)
        
        if verbose:
            print(f"\n{'='*80}")
            print(f"üìÑ –§–∞–π–ª {idx}/{len(files)}: {file_name}")
            print('='*80)
        
        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
            report_data = parse_terminal_report(file_path)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω
            if date_from is not None or date_to is not None:
                original_count = len(report_data['transactions'])
                filtered_transactions = []
                
                for transaction in report_data['transactions']:
                    date_str = transaction.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
                    if date_str:
                        try:
                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                            if isinstance(date_str, str):
                                # –§–æ—Ä–º–∞—Ç DD.MM.YYYY
                                parts = date_str.split('.')
                                if len(parts) == 3:
                                    day = int(parts[0])
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                                    if date_from is not None and day < date_from:
                                        continue
                                    if date_to is not None and day > date_to:
                                        continue
                                    filtered_transactions.append(transaction)
                            elif isinstance(date_str, (datetime, pd.Timestamp)):
                                day = date_str.day
                                if date_from is not None and day < date_from:
                                    continue
                                if date_to is not None and day > date_to:
                                    continue
                                filtered_transactions.append(transaction)
                        except:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                            pass
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                report_data['transactions'] = filtered_transactions
                report_data['total_transactions'] = len(filtered_transactions)
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                filtered_amount = 0.0
                filtered_commission = 0.0
                for trans in filtered_transactions:
                    amount = trans.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', 0)
                    if amount:
                        try:
                            filtered_amount += float(amount)
                        except:
                            pass
                    
                    # –ö–æ–º–∏—Å—Å–∏—è
                    commission_fields = [
                        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)',
                        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–µ (—Ç)',
                        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (—Ç)',
                        '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)',
                        '–ö–æ–º–∏—Å—Å–∏—è Kaspi Travel (—Ç)'
                    ]
                    for field in commission_fields:
                        value = trans.get(field)
                        if value:
                            try:
                                filtered_commission += abs(float(value))
                            except:
                                pass
                
                report_data['total_amount'] = filtered_amount
                report_data['total_commission'] = filtered_commission
                
                if verbose:
                    print(f"\n   üìÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:")
                    print(f"      –î–æ: {original_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                    print(f"      –ü–æ—Å–ª–µ: {len(filtered_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            report_data['file_name'] = file_name
            
            reports.append(report_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_transactions += report_data['total_transactions']
            total_amount += report_data['total_amount']
            total_commission += report_data['total_commission']
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            report_type = report_data['report_type']
            if report_type not in report_types_stats:
                report_types_stats[report_type] = {
                    'count': 0,
                    'transactions': 0,
                    'amount': 0.0
                }
            report_types_stats[report_type]['count'] += 1
            report_types_stats[report_type]['transactions'] += report_data['total_transactions']
            report_types_stats[report_type]['amount'] += report_data['total_amount']
            
            if verbose:
                print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                print(f"   –¢–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}")
                print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {report_data['total_transactions']}")
                print(f"   –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {report_data['total_amount']:,.2f} —Ç–≥")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è: {report_data['total_commission']:,.2f} —Ç–≥")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if report_data['metadata']:
                    print(f"\n   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                    for key, value in report_data['metadata'].items():
                        if value and key != 'report_type':
                            print(f"     ‚Ä¢ {key}: {value}")
        
        except Exception as e:
            failed_reports.append({
                'file_name': file_name,
                'file_path': file_path,
                'error': str(e)
            })
            
            if verbose:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success_files = len(reports)
    failed_files = len(failed_reports)
    
    if verbose:
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 80)
        print(f"\nüìÅ –§–∞–π–ª—ã:")
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_files}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_files}")
        
        print(f"\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        print(f"   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}")
        print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ç–≥")
        print(f"   –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: {total_commission:,.2f} —Ç–≥")
        
        if report_types_stats:
            print(f"\nüìã –ü–æ —Ç–∏–ø–∞–º –æ—Ç—á–µ—Ç–æ–≤:")
            for report_type, stats in report_types_stats.items():
                print(f"\n   {report_type}:")
                print(f"     –§–∞–π–ª–æ–≤: {stats['count']}")
                print(f"     –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['transactions']}")
                print(f"     –°—É–º–º–∞: {stats['amount']:,.2f} —Ç–≥")
        
        if failed_reports:
            print(f"\n‚ùå –§–ê–ô–õ–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
            for failed in failed_reports:
                print(f"\n   ‚Ä¢ {failed['file_name']}")
                print(f"     –û—à–∏–±–∫–∞: {failed['error']}")
        
        print("\n" + "=" * 80)
    
    return {
        'total_files': len(files),
        'success_files': success_files,
        'failed_files': failed_files,
        'total_transactions': total_transactions,
        'total_amount': total_amount,
        'total_commission': total_commission,
        'reports': reports,
        'failed_reports': failed_reports,
        'report_types_stats': report_types_stats
    }


def analyze_matching_fields(
    file_path: str,
    db: Session,
    sample_size: int = 5
) -> None:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ –∫–∞–∫–∏–º –ø–æ–ª—è–º –º–æ–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –ë–î –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–≤—è–∑–µ–π.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        db: SQLAlchemy —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sample_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        from models.sales import Sales
        
        print("\n" + "=" * 80)
        print("üî¨ –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –î–õ–Ø –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–•")
        print("=" * 80)
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        data = parse_terminal_report(file_path)
        transactions = data['transactions'][:sample_size]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ë–î Sales
        sales_records = db.query(Sales).limit(sample_size).all()
        
        print(f"\nüìã –ü–û–õ–Ø –ò–ó –û–¢–ß–ï–¢–ê –¢–ï–†–ú–ò–ù–ê–õ–ê (–ø—Ä–∏–º–µ—Ä—ã –∏–∑ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π):")
        print("-" * 80)
        
        if transactions:
            trans = transactions[0]
            important_fields = [
                '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–í—Ä–µ–º—è', '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)',
                '–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)', '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏',
                '–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)'
            ]
            
            for field in important_fields:
                if field in trans:
                    print(f"  ‚Ä¢ {field}: {trans[field]}")
        
        print(f"\nüìä –ü–û–õ–Ø –ò–ó –ë–î SALES (–ø—Ä–∏–º–µ—Ä—ã –∏–∑ {len(sales_records)} –∑–∞–ø–∏—Å–µ–π):")
        print("-" * 80)
        
        if sales_records:
            sale = sales_records[0]
            important_db_fields = [
                ('close_time', '–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞'),
                ('open_time', '–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞'),
                ('dish_discount_sum_int', '–°—É–º–º–∞ –±–ª—é–¥–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫'),
                ('dish_sum_int', '–°—É–º–º–∞ –±–ª—é–¥–∞ –±–µ–∑ —Å–∫–∏–¥–æ–∫'),
                ('order_id', 'ID –∑–∞–∫–∞–∑–∞'),
                ('pay_types', '–¢–∏–ø—ã –æ–ø–ª–∞—Ç—ã'),
                ('commission', '–ö–æ–º–∏—Å—Å–∏—è'),
                ('card_number', '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'),
            ]
            
            for field_name, description in important_db_fields:
                value = getattr(sale, field_name, None)
                if value is not None:
                    print(f"  ‚Ä¢ {description} ({field_name}): {value}")
        
        print(f"\nüîó –í–û–ó–ú–û–ñ–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:")
        print("-" * 80)
        print("  1. ‚è∞ –í–†–ï–ú–Ø:")
        print("     –¢–µ—Ä–º–∏–Ω–∞–ª: '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏' + '–í—Ä–µ–º—è'")
        print("     –ë–î Sales: 'close_time' –∏–ª–∏ 'open_time'")
        print("     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é ¬±5 –º–∏–Ω—É—Ç")
        print()
        print("  2. üí∞ –°–£–ú–ú–ê:")
        print("     –¢–µ—Ä–º–∏–Ω–∞–ª: '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)'")
        print("     –ë–î Sales: 'dish_discount_sum_int' (—Å—É–º–º–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫)")
        print("     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é ¬±1-2% (–¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è)")
        print()
        print("  3. üí≥ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø:")
        print("     –¢–µ—Ä–º–∏–Ω–∞–ª: '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã'")
        print("     –ë–î Sales: 'card_number', 'pay_types'")
        print("     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É")
        print()
        print("  4. üìù –¢–ò–ü –û–ü–ï–†–ê–¶–ò–ò:")
        print("     –¢–µ—Ä–º–∏–Ω–∞–ª: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏' (–ü–æ–∫—É–ø–∫–∞, –í–æ–∑–≤—Ä–∞—Ç –∏ —Ç.–¥.)")
        print("     –ë–î Sales: 'operation_type'")
        print()
        
        print(f"\nüìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:")
        print("-" * 80)
        print(f"{'–ü–æ–ª–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞':<35} | {'–ü–æ–ª–µ –ë–î Sales':<35}")
        print("-" * 80)
        print(f"{'–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ + –í—Ä–µ–º—è':<35} | {'close_time / open_time':<35}")
        print(f"{'–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)':<35} | {'dish_discount_sum_int':<35}")
        print(f"{'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã':<35} | {'card_number':<35}")
        print(f"{'–¢–∏–ø –æ–ø–ª–∞—Ç—ã':<35} | {'pay_types':<35}")
        print(f"{'–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)':<35} | {'commission':<35}")
        print(f"{'–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏':<35} | {'operation_type':<35}")
        
        print("\n" + "=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–ª–µ–π: {e}")
        import traceback
        traceback.print_exc()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    test_file = r"C:\Documents\sidework\backend\GC_backend_main_node\temp_files\sales report from terminal.xlsx"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    import sys
    if len(sys.argv) > 1:
        if sys.argv[1] == 'inspect':
            # –†–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            print("üîç –†–ï–ñ–ò–ú –î–ï–¢–ê–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê –§–ê–ô–õ–ê\n")
            inspect_excel_file(test_file, max_rows=15)
            sys.exit(0)
        elif sys.argv[1] == 'analyze':
            # –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            print("üî¨ –†–ï–ñ–ò–ú –ê–ù–ê–õ–ò–ó–ê –ü–û–õ–ï–ô –î–õ–Ø –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø\n")
            try:
                from database.database import SessionLocal
                db = SessionLocal()
                analyze_matching_fields(test_file, db, sample_size=3)
                db.close()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
            sys.exit(0)
        elif sys.argv[1] == 'compare':
            # –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ë–î
            print("üîç –†–ï–ñ–ò–ú –°–†–ê–í–ù–ï–ù–ò–Ø –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•\n")
            try:
                from database.database import SessionLocal
                db = SessionLocal()
                result = compare_terminal_report_with_db(
                    test_file, 
                    db,
                    time_tolerance_minutes=15,
                    amount_tolerance_percent=5.0,
                    verbose=True
                )
                db.close()
                
                print(f"\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result")
                print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['matched']}")
                print(f"   –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {result['not_matched']}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
            sys.exit(0)
    
    try:
        print("=" * 60)
        print("–ü–ê–†–°–ï–† –û–¢–ß–ï–¢–û–í –û–¢ –¢–ï–†–ú–ò–ù–ê–õ–ê –û–ü–õ–ê–¢–´")
        print("=" * 60)
        
        # –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç—á–µ—Ç–∞
        data = parse_terminal_report(test_file)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        print("\nüìã –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
        for key, value in data['metadata'].items():
            print(f"  {key}: {value}")
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–í–û–î–ö–ê:")
        print(f"  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['total_transactions']}")
        print(f"  –û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {data['total_amount']:,.2f} —Ç–≥")
        print(f"  –°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {data['total_to_credit']:,.2f} —Ç–≥")
        print(f"  –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: {data['total_commission']:,.2f} —Ç–≥")
        
        # –î–µ—Ç–∞–ª–∏ –∫–æ–º–∏—Å—Å–∏–π
        if data['commission_details']:
            print("\n  –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–π:")
            for comm_type, amount in data['commission_details'].items():
                if amount != 0:
                    print(f"    - {comm_type}: {amount:,.2f} —Ç–≥")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        summary = get_transactions_summary(test_file)
        
        if summary['operation_types']:
            print("\n  –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π:")
            for op_type, count in summary['operation_types'].items():
                print(f"    - {op_type}: {count} —à—Ç.")
        
        if summary['payment_types']:
            print("\n  –¢–∏–ø—ã –æ–ø–ª–∞—Ç—ã:")
            for pay_type, count in summary['payment_types'].items():
                print(f"    - {pay_type}: {count} —à—Ç.")
        
        print(f"\n  –ü–µ—Ä–∏–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–π:")
        print(f"    –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {summary['date_range']['first']}")
        print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {summary['date_range']['last']}")
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        print("\nüìù –ü–†–ò–ú–ï–†–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–ø–µ—Ä–≤—ã–µ 3):")
        for i, transaction in enumerate(data['transactions'][:3], 1):
            print(f"\n  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{i}:")
            important_fields = [
                '#', '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–í—Ä–µ–º—è', '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', 
                '–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', 
                '–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)', '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)'
            ]
            for field in important_fields:
                if field in transaction and transaction[field] is not None:
                    print(f"    {field}: {transaction[field]}")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        print("\n" + "=" * 60)
        print("–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô:")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–∞—Ç–µ
        if data['transactions']:
            first_date = data['transactions'][0].get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
            if first_date:
                transactions_by_date = get_transactions_by_date(test_file, str(first_date))
                print(f"\nüóìÔ∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {first_date}: {len(transactions_by_date)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É
        purchases = get_transactions_by_type(test_file, '–ü–æ–∫—É–ø–∫–∞')
        print(f"\nüõí –ü–æ–∫—É–ø–æ–∫: {len(purchases)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º
        print(f"\nüíµ –û–±—â–∞—è —Å—É–º–º–∞ (—Ñ—É–Ω–∫—Ü–∏—è): {get_total_amount(test_file):,.2f} —Ç–≥")
        print(f"üíµ –ö –∑–∞—á–∏—Å–ª–µ–Ω–∏—é (—Ñ—É–Ω–∫—Ü–∏—è): {get_total_to_credit(test_file):,.2f} —Ç–≥")
        print(f"üíµ –ö–æ–º–∏—Å—Å–∏—è (—Ñ—É–Ω–∫—Ü–∏—è): {get_total_commission(test_file):,.2f} —Ç–≥")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        print("=" * 60)
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


"""
=============================================================================
–ö–†–ê–¢–ö–û–ï –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ
=============================================================================

üÜï –ù–û–í–û–ï: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –û–¢–ß–ï–¢–ê –ò –ü–ê–†–°–ò–ù–ì –ü–ê–ü–ö–ò
--------------------------------------------------------------------

–ú–æ–¥—É–ª—å —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤:
1. Kaspi - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º (37 –∫–æ–ª–æ–Ω–æ–∫)
2. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –≤—ã–ø–∏—Å–∫–∏ (–ù–∞—Ä–æ–¥–Ω—ã–π –ë–∞–Ω–∫ –∏ –¥—Ä.) - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

–¢–∏–ø –æ—Ç—á–µ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!


0a. –ü–ê–†–°–ò–ù–ì –í–°–ï–ô –ü–ê–ü–ö–ò –° –û–¢–ß–ï–¢–ê–ú–ò (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–±):

   from utils.terminal_report_parsing import parse_terminals_directory
   
   # –ü–∞—Ä—Å–∏—Ç –≤—Å–µ .xlsx —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã
   result = parse_terminals_directory(
       "temp_files/terminals_report/",
       verbose=True,   # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
       date_from=13,   # —Å 13 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
       date_to=18      # –ø–æ 18 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
   )
   
   print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['success_files']}")
   print(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['total_transactions']}")
   print(f"–û–±—â–∞—è —Å—É–º–º–∞: {result['total_amount']:,.2f} —Ç–≥")
   
   # –î–æ—Å—Ç—É–ø –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ—Ç—á–µ—Ç–∞–º
   for report in result['reports']:
       print(f"\n–§–∞–π–ª: {report['file_name']}")
       print(f"–¢–∏–ø: {report['report_type']}")
       print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {report['total_transactions']}")
   
   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
   - total_files: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   - success_files: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
   - failed_files: —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
   - total_transactions: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   - total_amount: –æ–±—â–∞—è —Å—É–º–º–∞
   - total_commission: –æ–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
   - reports: —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   - failed_reports: —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
   - report_types_stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ç—á–µ—Ç–æ–≤


0b. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –û–¢–ß–ï–¢–ê:

   from utils.terminal_report_parsing import detect_report_type, TerminalReportType
   
   report_type = detect_report_type("—Ñ–∞–π–ª.xlsx")
   
   if report_type == TerminalReportType.KASPI_DETAILED:
       print("–≠—Ç–æ Kaspi –æ—Ç—á–µ—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
   elif report_type == TerminalReportType.BANK_STATEMENT:
       print("–≠—Ç–æ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≤—ã–ø–∏—Å–∫–∞")


0. –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –§–ê–ô–õ–ê (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã):
   
   from utils.terminal_report_parsing import inspect_excel_file
   
   # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞, –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   inspect_excel_file("—Ñ–∞–π–ª.xlsx", max_rows=10)
   
   # –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:
   # python utils/terminal_report_parsing.py inspect
   
   
0.1. –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ –ò–ó –ö–û–ú–ê–ù–î–ù–û–ô –°–¢–†–û–ö–ò:
   
   # –†–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞:
   python utils/terminal_report_parsing.py inspect
   
   # –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –ë–î:
   python utils/terminal_report_parsing.py analyze
   
   # –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ë–î:
   python utils/terminal_report_parsing.py compare
   
   # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):
   python utils/terminal_report_parsing.py


1. –û–°–ù–û–í–ù–û–ô –ü–ê–†–°–ò–ù–ì:
   
   from utils.terminal_report_parsing import parse_terminal_report
   
   data = parse_terminal_report("–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.xlsx")
   
   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏:
   - metadata: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–∏–æ–¥, –ò–ò–ù/–ë–ò–ù, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
   - total_transactions: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   - total_amount: –æ–±—â–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
   - total_to_credit: —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
   - total_commission: –æ–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
   - commission_details: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–π
   - transactions: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   - summary: —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è


2. –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –î–ê–¢–ï:
   
   from utils.terminal_report_parsing import get_transactions_by_date
   
   # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD
   transactions = get_transactions_by_date("—Ñ–∞–π–ª.xlsx", "29.09.2025")


3. –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –¢–ò–ü–£:
   
   from utils.terminal_report_parsing import get_transactions_by_type
   
   purchases = get_transactions_by_type("—Ñ–∞–π–ª.xlsx", "–ü–æ–∫—É–ø–∫–∞")
   refunds = get_transactions_by_type("—Ñ–∞–π–ª.xlsx", "–í–æ–∑–≤—Ä–∞—Ç")


4. –ü–û–õ–£–ß–ï–ù–ò–ï –°–í–û–î–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò:
   
   from utils.terminal_report_parsing import get_transactions_summary
   
   summary = get_transactions_summary("—Ñ–∞–π–ª.xlsx")
   # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∏—Ç–æ–≥–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –æ–ø–ª–∞—Ç—ã


5. –ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–ù–ê–ù–°–û–í–´–• –ò–¢–û–ì–û–í:
   
   from utils.terminal_report_parsing import (
       get_total_amount, 
       get_total_to_credit, 
       get_total_commission
   )
   
   total = get_total_amount("—Ñ–∞–π–ª.xlsx")
   credit = get_total_to_credit("—Ñ–∞–π–ª.xlsx")
   commission = get_total_commission("—Ñ–∞–π–ª.xlsx")


6. –ü–†–Ø–ú–û–ï –ß–¢–ï–ù–ò–ï DATAFRAME:
   
   from utils.terminal_report_parsing import read_terminal_report
   
   df = read_terminal_report("—Ñ–∞–π–ª.xlsx")
   # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç pandas DataFrame —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏


7. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–•:
   
   from utils.terminal_report_parsing import extract_metadata
   
   metadata = extract_metadata("—Ñ–∞–π–ª.xlsx")
   # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {'–ü–µ—Ä–∏–æ–¥': '29.09.2025', '–ò–ò–ù/–ë–ò–ù': '...', ...}


8. –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –î–õ–Ø –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –° –ë–î:
   
   from utils.terminal_report_parsing import analyze_matching_fields
   from database.database import SessionLocal
   
   db = SessionLocal()
   analyze_matching_fields("—Ñ–∞–π–ª.xlsx", db)
   # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–≤—è–∑–∏ –¥–∞–Ω–Ω—ã—Ö
   

9. –°–†–ê–í–ù–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –° –ë–î:
   
   from utils.terminal_report_parsing import compare_terminal_report_with_db
   from database.database import SessionLocal
   
   db = SessionLocal()
   result = compare_terminal_report_with_db(
       "—Ñ–∞–π–ª.xlsx", 
       db,
       amount_tolerance_percent=1.0,  # –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—É–º–º–µ ¬±1%
       verbose=True,                   # –≤—ã–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
       date_from=13,                   # —Å 13 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
       date_to=18                      # –ø–æ 18 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
   )
   
   # –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:
   # - –ü–æ –≤—Ä–µ–º–µ–Ω–∏: –¥–µ–Ω—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (00:00) + –¥–æ 04:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
   #   (–ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ —á–µ–∫ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –≤–µ—á–µ—Ä–æ–º, –∞ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏)
   # - –ü–æ —Å—É–º–º–µ: —Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é ¬±1%
   # - –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ª—É—á—à–∏–π (–ø–æ —Å—É–º–º–µ, –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
   # - –ü–æ –¥–∞—Ç–µ: —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å 13 –ø–æ 18 —á–∏—Å–ª–æ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã date_from –∏ date_to)
   
   print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['matched']}")
   print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ: {result['not_matched']}")
   print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['match_percentage']:.1f}%")


10. –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –í –ë–î:
   
   from utils.terminal_report_parsing import match_transaction_with_sales
   from database.database import SessionLocal
   
   db = SessionLocal()
   transaction = {
       '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏': '29.09.2025',
       '–í—Ä–µ–º—è': '14:30:00',
       '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)': 15000.0
   }
   
   sales_match = match_transaction_with_sales(transaction, db)
   if sales_match:
       print(f"–ù–∞–π–¥–µ–Ω–æ! Order ID: {sales_match['order_id']}")

=============================================================================

üÜï –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –û–¢–ß–ï–¢–û–í –ò –õ–û–ì–û–í
--------------------------------------------------------------------

11. –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê –û –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–•:

   from utils.terminal_report_parsing import save_all_transactions_report
   
   # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON —Å —Å–æ–≤–ø–∞–≤—à–∏–º–∏ –∏ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
   success = save_all_transactions_report(
       matched_transactions,      # –°–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
       not_matched_transactions,  # –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
       "reports/all_transactions_report.json",
       metadata={                 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
           'source_file': 'terminal_report.xlsx',
           'processing_date': '2025-01-23 15:30:00',
           'total_transactions': 150,
           'matched': 120,
           'not_matched': 30
       }
   )
   
   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ñ–∞–π–ª–∞:
   {
     "timestamp": "2025-01-23 15:30:00",
     "summary": {
       "total_matched": 120,
       "total_not_matched": 30,
       "total_transactions": 150,
       "match_percentage": 80.0
     },
     "metadata": {...},
     "matched_transactions": [
       {
         "terminal_transaction": {...},
         "order": {...},
         "check_sales": [...],
         "payment_transaction_id": "...",
         "check_sum": 1500.0,
         "is_multi_check_order": false,
         "match_confidence": "high"
       }
     ],
     "not_matched_transactions": [...]
   }


12. –°–û–ó–î–ê–ù–ò–ï –õ–û–ì –§–ê–ô–õ–ê –ö–û–ú–ò–°–°–ò–ô:

   from utils.terminal_report_parsing import create_commission_log_file
   
   # –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∏—Å—Å–∏–π
   commission_records = [
       {
           'order_id': 123,
           'order_iiko_id': 'abc-123-def',
           'commission_amount': 45.50,
           'previous_commission': 0.0,
           'new_commission': 45.50,
           'operation_type': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
           'terminal_transaction': {...},
           'check_info': {...},
           'timestamp': '2025-01-23 15:30:00'
       }
   ]
   
   success = create_commission_log_file(
       "logs/commission_log_20250123.txt",
       commission_records,
       metadata={
           'source_file': 'terminal_report.xlsx',
           'total_commission_records': 1,
           'total_commission_amount': 45.50
       }
   )
   
   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–≥ —Ñ–∞–π–ª–∞:
   ================================================================================
   –õ–û–ì –ó–ê–ü–ò–°–ò –ö–û–ú–ò–°–°–ò–ô –í D_ORDER
   ================================================================================
   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-23 15:30:00
   
   –ú–ï–¢–ê–î–ê–ù–ù–´–ï:
   ----------------------------------------
   source_file: terminal_report.xlsx
   total_commission_records: 1
   
   –í–°–ï–ì–û –ó–ê–ü–ò–°–ï–ô –ö–û–ú–ò–°–°–ò–ô: 1
   
   –ó–ê–ü–ò–°–¨ #1
   ----------------------------------------
   Order ID (d_order.id): 123
   Order iiko_id: abc-123-def
   –ö–æ–º–∏—Å—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: 45.5 —Ç–≥
   –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: 0.0 —Ç–≥
   –ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: 45.5 —Ç–≥
   –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:
     –î–∞—Ç–∞/–í—Ä–µ–º—è: 23.01.2025 14:30:00
     –°—É–º–º–∞: 1500.0 —Ç–≥
     –ê–¥—Ä–µ—Å: Astana, Mangilik el, 50
   –ß–µ–∫:
     Payment transaction ID: pay-123-456
     –°—É–º–º–∞ —á–µ–∫–∞: 1500.0 —Ç–≥
     –ü–æ–∑–∏—Ü–∏–π –≤ —á–µ–∫–µ: 3
     –ó–∞–∫–∞–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏: –ù–µ—Ç
   –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: 2025-01-23 15:30:00
   
   –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
   ----------------------------------------
   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: 1
   –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: 45.50 —Ç–≥
   –ü–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:
     –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: 1 –∑–∞–ø–∏—Å–µ–π


13. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï:

   from utils.terminal_report_parsing import compare_terminal_report_with_db
   from database.database import SessionLocal
   
   db = SessionLocal()
   result = compare_terminal_report_with_db(
       "terminal_report.xlsx", 
       db,
       amount_tolerance_percent=1.0,
       write_commissions=True,                    # –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ë–î
       save_all_transactions_to="reports/all_transactions.json",  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
       save_commission_log_to="logs/commission_log.txt"          # –°–æ–∑–¥–∞—Ç—å –ª–æ–≥ –∫–æ–º–∏—Å—Å–∏–π
   )
   
   # –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   # 1. –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   # 2. –ó–∞–ø–∏—à–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –≤ d_order.bank_commission
   # 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ JSON
   # 4. –°–æ–∑–¥–∞—Å—Ç –ª–æ–≥ —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∏—Å—Å–∏–π
   
   print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['total_transactions']}")
   print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {result['matched']}")
   print(f"–ö–æ–º–∏—Å—Å–∏–π –∑–∞–ø–∏—Å–∞–Ω–æ: {result['commissions_written']}")


14. –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø process_and_write_commissions:

   from utils.terminal_report_parsing import process_and_write_commissions
   from database.database import SessionLocal
   
   db = SessionLocal()
   
   # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤
   result = process_and_write_commissions(
       "terminal_report.xlsx",
       db,
       terminal_org_mapping={},  # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞–¥—Ä–µ—Å–æ–≤
       dry_run=False,            # –†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î
       verbose=True,             # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
       date_from=13,             # –° 13 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
       date_to=18,               # –ü–æ 18 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
       save_all_transactions_to="reports/transactions_13-18.json",
       save_commission_log_to="logs/commissions_13-18.txt"
   )
   
   # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:
   # - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
   # - –°–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   # - –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   # - –ó–∞–ø–∏—Å–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö –¥–ª—è –ª–æ–≥–∞


=============================================================================
"""
