# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã (Kaspi)

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–æ–≤ 
—Å –≤—ã–≥—Ä—É–∑–∫–∞–º–∏ –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã Kaspi.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
-----------------
- inspect_excel_file(file_path, max_rows) - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- parse_terminal_report(file_path) - –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç—á–µ—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
- get_transactions_by_date(file_path, date) - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
- get_transactions_by_type(file_path, type) - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
- get_transactions_summary(file_path) - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- get_total_amount(file_path) - –æ–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- get_total_to_credit(file_path) - —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
- get_total_commission(file_path) - –æ–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
--------------------
    from utils.terminal_report_parsing import parse_terminal_report
    
    data = parse_terminal_report("report.xlsx")
    print(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['total_transactions']}")
    print(f"–û–±—â–∞—è —Å—É–º–º–∞: {data['total_amount']} —Ç–≥")
    print(f"–ö–æ–º–∏—Å—Å–∏—è: {data['total_commission']} —Ç–≥")

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
-----------
- pandas >= 2.2.3
- openpyxl >= 3.1.5
"""

import pandas as pd
from typing import Dict, List, Optional, Any
from datetime import datetime
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')


def inspect_excel_file(file_path: str, max_rows: int = 10) -> None:
    """
    –ü–æ–¥—Ä–æ–±–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        max_rows: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    """
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print("=" * 80)
    print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–ê")
    print("=" * 80)
    print(f"\nüìÅ –§–∞–π–ª: {file_path}")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        df_raw = pd.read_excel(file_path, engine='openpyxl', header=None)
        
        print(f"\nüìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(df_raw)} —Å—Ç—Ä–æ–∫ √ó {len(df_raw.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–æ–∫ "–∫–∞–∫ –µ—Å—Ç—å"
        print(f"\n" + "=" * 80)
        print(f"–ü–ï–†–í–´–ï {min(max_rows, len(df_raw))} –°–¢–†–û–ö (–ë–ï–ó –û–ë–†–ê–ë–û–¢–ö–ò)")
        print("=" * 80)
        
        for idx, row in df_raw.head(max_rows).iterrows():
            print(f"\nüìå –°—Ç—Ä–æ–∫–∞ {idx + 1}:")
            non_empty_cells = []
            for col_idx, value in enumerate(row):
                if pd.notna(value) and str(value).strip():
                    non_empty_cells.append(f"  –ö–æ–ª–æ–Ω–∫–∞ {col_idx}: {value}")
            
            if non_empty_cells:
                for cell in non_empty_cells[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–µ–ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
                    print(cell)
            else:
                print("  (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        print(f"\n" + "=" * 80)
        print("üîç –ü–û–ò–°–ö –°–¢–†–û–ö–ò –° –ó–ê–ì–û–õ–û–í–ö–ê–ú–ò")
        print("=" * 80)
        
        header_row_idx = None
        for idx, row in df_raw.iterrows():
            if row.iloc[0] == '#':
                header_row_idx = idx
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: —Å—Ç—Ä–æ–∫–∞ {idx + 1}")
                print(f"\n–ó–∞–≥–æ–ª–æ–≤–∫–∏:")
                for col_idx, value in enumerate(row):
                    if pd.notna(value) and str(value).strip():
                        print(f"  {col_idx + 1}. {value}")
                break
        
        if header_row_idx is None:
            print("\n‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–∏—â–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É '#')")
            return
        
        # –ß–∏—Ç–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df = pd.read_excel(file_path, engine='openpyxl', header=header_row_idx)
        df = df.dropna(how='all')
        df = df[df.iloc[:, 0].apply(lambda x: str(x).isdigit() if pd.notna(x) else False)]
        
        print(f"\n" + "=" * 80)
        print("üìã –°–ü–ò–°–û–ö –í–°–ï–• –ö–û–õ–û–ù–û–ö –° –ü–†–ò–ú–ï–†–ê–ú–ò –î–ê–ù–ù–´–•")
        print("=" * 80)
        print(f"\n–í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        
        for i, col in enumerate(df.columns, 1):
            print(f"\n{i}. üìå {col}")
            print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {df[col].dtype}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            if pd.api.types.is_numeric_dtype(df[col]):
                non_null = df[col].dropna()
                if len(non_null) > 0:
                    print(f"   –ù–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(non_null)}")
                    print(f"   –ú–∏–Ω–∏–º—É–º: {non_null.min()}")
                    print(f"   –ú–∞–∫—Å–∏–º—É–º: {non_null.max()}")
                    print(f"   –°—Ä–µ–¥–Ω–µ–µ: {non_null.mean():.2f}")
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                unique_vals = df[col].dropna().unique()
                print(f"   –ù–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {df[col].notna().sum()}")
                if len(unique_vals) > 0:
                    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(unique_vals)}")
                    if len(unique_vals) <= 5:
                        print(f"   –ó–Ω–∞—á–µ–Ω–∏—è: {', '.join(map(str, unique_vals))}")
                    else:
                        print(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(map(str, unique_vals[:3]))}...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
            first_vals = df[col].head(3).tolist()
            print(f"   –ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {first_vals}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        print(f"\n" + "=" * 80)
        print("üìù –ü–†–ò–ú–ï–†–´ –ü–û–õ–ù–´–• –ó–ê–ü–ò–°–ï–ô (–¢–†–ê–ù–ó–ê–ö–¶–ò–ô)")
        print("=" * 80)
        
        for idx in range(min(3, len(df))):
            print(f"\n{'=' * 40}")
            print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{idx + 1}")
            print('=' * 40)
            
            row = df.iloc[idx]
            important_cols = [
                '#', '–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂', '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–í—Ä–µ–º—è',
                '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
                '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', '–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)',
                '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)'
            ]
            
            for col in important_cols:
                if col in df.columns:
                    value = row[col]
                    if pd.notna(value):
                        print(f"{col}: {value}")
        
        print(f"\n" + "=" * 80)
        print("‚úÖ –ü–†–û–°–ú–û–¢–† –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()


def extract_metadata(file_path: str) -> Dict[str, str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–∏–æ–¥, –ò–ò–ù/–ë–ò–ù, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ).
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    df_meta = pd.read_excel(file_path, engine='openpyxl', nrows=3)
    metadata = {}
    
    for idx, row in df_meta.iterrows():
        if pd.notna(row.iloc[1]):
            key = str(row.iloc[1]).replace(':', '').strip()
            value = str(row.iloc[2]) if pd.notna(row.iloc[2]) else None
            metadata[key] = value
    
    return metadata


def read_terminal_report(file_path: str) -> pd.DataFrame:
    """
    –ß–∏—Ç–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        Exception: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df_raw = pd.read_excel(file_path, engine='openpyxl', header=None)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç "#" –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ)
        header_row_idx = None
        for idx, row in df_raw.iterrows():
            if row.iloc[0] == '#':
                header_row_idx = idx
                break
        
        if header_row_idx is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ —Ñ–∞–π–ª–µ")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        df = pd.read_excel(file_path, engine='openpyxl', header=header_row_idx)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(how='all')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        df = df[df.iloc[:, 0].apply(lambda x: str(x).isdigit() if pd.notna(x) else False)]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
        df = df.reset_index(drop=True)
        
        return df
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")


def parse_terminal_report(file_path: str) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
        {
            'metadata': dict,            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–∏–æ–¥, –ò–ò–ù/–ë–ò–ù, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
            'total_transactions': int,   # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            'total_amount': float,       # –û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
            'total_to_credit': float,    # –û–±—â–∞—è —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
            'total_commission': float,   # –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
            'transactions': list,        # –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            'summary': dict              # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = extract_metadata(file_path)
    
    # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    df = read_terminal_report(file_path)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions = []
    for idx, row in df.iterrows():
        transaction = {}
        for col in df.columns:
            value = row[col]
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º NaN –≤ None
            if pd.isna(value):
                transaction[col] = None
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Timestamp –≤ —Å—Ç—Ä–æ–∫—É
            elif isinstance(value, pd.Timestamp):
                transaction[col] = value.strftime('%Y-%m-%d %H:%M:%S')
            else:
                transaction[col] = value
        transactions.append(transaction)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    total_transactions = len(transactions)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏
    # –ö–æ–ª–æ–Ω–∫–∞ "–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)" - —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    amount_col = '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)'
    total_amount = 0.0
    if amount_col in df.columns:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –∑–∞–º–µ–Ω—è—è None –Ω–∞ 0
        df[amount_col] = pd.to_numeric(df[amount_col], errors='coerce').fillna(0)
        total_amount = float(df[amount_col].sum())
    
    # –ö–æ–ª–æ–Ω–∫–∞ "–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)" - —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
    credit_col = '–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)'
    total_to_credit = 0.0
    if credit_col in df.columns:
        df[credit_col] = pd.to_numeric(df[credit_col], errors='coerce').fillna(0)
        total_to_credit = float(df[credit_col].sum())
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –∫–æ–º–∏—Å—Å–∏–π
    commission_cols = [
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–µ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)',
        '–ö–æ–º–∏—Å—Å–∏—è Kaspi Travel (—Ç)'
    ]
    
    total_commission = 0.0
    commission_details = {}
    for comm_col in commission_cols:
        if comm_col in df.columns:
            df[comm_col] = pd.to_numeric(df[comm_col], errors='coerce').fillna(0)
            commission_sum = float(df[comm_col].sum())
            commission_details[comm_col] = commission_sum
            total_commission += abs(commission_sum)
    
    return {
        'metadata': metadata,
        'total_transactions': total_transactions,
        'total_amount': total_amount,
        'total_to_credit': total_to_credit,
        'total_commission': total_commission,
        'commission_details': commission_details,
        'transactions': transactions,
        'summary': {
            'columns': list(df.columns),
            'first_transaction': transactions[0] if transactions else None,
            'last_transaction': transactions[-1] if transactions else None,
        }
    }


def get_transactions_by_date(file_path: str, target_date: str) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        target_date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY' –∏–ª–∏ 'YYYY-MM-DD'
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    """
    data = parse_terminal_report(file_path)
    transactions = data['transactions']
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if '-' in target_date:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –≤ DD.MM.YYYY
        parts = target_date.split('-')
        target_date = f"{parts[2]}.{parts[1]}.{parts[0]}"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
    filtered_transactions = []
    date_field = '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    
    for transaction in transactions:
        if date_field in transaction and transaction[date_field]:
            trans_date = str(transaction[date_field])
            if trans_date == target_date or trans_date.startswith(target_date):
                filtered_transactions.append(transaction)
    
    return filtered_transactions


def get_total_amount(file_path: str) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ç—á–µ—Ç–µ.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    data = parse_terminal_report(file_path)
    return data['total_amount']


def get_total_to_credit(file_path: str) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –û–±—â–∞—è —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
    """
    data = parse_terminal_report(file_path)
    return data['total_to_credit']


def get_total_commission(file_path: str) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–π.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π
    """
    data = parse_terminal_report(file_path)
    return data['total_commission']


def get_transactions_by_type(file_path: str, operation_type: str) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        operation_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–∫—É–ø–∫–∞', '–í–æ–∑–≤—Ä–∞—Ç')
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    """
    data = parse_terminal_report(file_path)
    transactions = data['transactions']
    
    type_field = '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏'
    filtered_transactions = [
        t for t in transactions 
        if type_field in t and t[type_field] == operation_type
    ]
    
    return filtered_transactions


def get_transactions_summary(file_path: str) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    data = parse_terminal_report(file_path)
    df = read_terminal_report(file_path)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
    operation_stats = {}
    if '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏' in df.columns:
        operation_counts = df['–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏'].value_counts().to_dict()
        operation_stats = {str(k): int(v) for k, v in operation_counts.items()}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–ø–ª–∞—Ç—ã
    payment_stats = {}
    if '–¢–∏–ø –æ–ø–ª–∞—Ç—ã' in df.columns:
        payment_counts = df['–¢–∏–ø –æ–ø–ª–∞—Ç—ã'].value_counts().to_dict()
        payment_stats = {str(k): int(v) for k, v in payment_counts.items()}
    
    summary = {
        'metadata': data['metadata'],
        'total_transactions': data['total_transactions'],
        'total_amount': data['total_amount'],
        'total_to_credit': data['total_to_credit'],
        'total_commission': data['total_commission'],
        'commission_details': data['commission_details'],
        'operation_types': operation_stats,
        'payment_types': payment_stats,
        'date_range': {
            'first': data['summary']['first_transaction'].get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏') if data['summary']['first_transaction'] else None,
            'last': data['summary']['last_transaction'].get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏') if data['summary']['last_transaction'] else None,
        }
    }
    
    return summary


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    test_file = r"C:\Documents\sidework\backend\GC_backend_main_node\temp_files\sales report from terminal.xlsx"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == 'inspect':
        # –†–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        print("üîç –†–ï–ñ–ò–ú –î–ï–¢–ê–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê –§–ê–ô–õ–ê\n")
        inspect_excel_file(test_file, max_rows=15)
        sys.exit(0)
    
    try:
        print("=" * 60)
        print("–ü–ê–†–°–ï–† –û–¢–ß–ï–¢–û–í –û–¢ –¢–ï–†–ú–ò–ù–ê–õ–ê –û–ü–õ–ê–¢–´")
        print("=" * 60)
        
        # –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç—á–µ—Ç–∞
        data = parse_terminal_report(test_file)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        print("\nüìã –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
        for key, value in data['metadata'].items():
            print(f"  {key}: {value}")
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –°–í–û–î–ö–ê:")
        print(f"  –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['total_transactions']}")
        print(f"  –û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {data['total_amount']:,.2f} —Ç–≥")
        print(f"  –°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {data['total_to_credit']:,.2f} —Ç–≥")
        print(f"  –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: {data['total_commission']:,.2f} —Ç–≥")
        
        # –î–µ—Ç–∞–ª–∏ –∫–æ–º–∏—Å—Å–∏–π
        if data['commission_details']:
            print("\n  –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–π:")
            for comm_type, amount in data['commission_details'].items():
                if amount != 0:
                    print(f"    - {comm_type}: {amount:,.2f} —Ç–≥")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        summary = get_transactions_summary(test_file)
        
        if summary['operation_types']:
            print("\n  –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π:")
            for op_type, count in summary['operation_types'].items():
                print(f"    - {op_type}: {count} —à—Ç.")
        
        if summary['payment_types']:
            print("\n  –¢–∏–ø—ã –æ–ø–ª–∞—Ç—ã:")
            for pay_type, count in summary['payment_types'].items():
                print(f"    - {pay_type}: {count} —à—Ç.")
        
        print(f"\n  –ü–µ—Ä–∏–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–π:")
        print(f"    –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {summary['date_range']['first']}")
        print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {summary['date_range']['last']}")
        
        # –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        print("\nüìù –ü–†–ò–ú–ï–†–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (–ø–µ—Ä–≤—ã–µ 3):")
        for i, transaction in enumerate(data['transactions'][:3], 1):
            print(f"\n  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{i}:")
            important_fields = [
                '#', '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–í—Ä–µ–º—è', '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', 
                '–¢–∏–ø –æ–ø–ª–∞—Ç—ã', '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', 
                '–°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é/ —Å–ø–∏—Å–∞–Ω–∏—é (—Ç)', '–ö–æ–º–∏—Å—Å–∏—è Kaspi Pay (—Ç)'
            ]
            for field in important_fields:
                if field in transaction and transaction[field] is not None:
                    print(f"    {field}: {transaction[field]}")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        print("\n" + "=" * 60)
        print("–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô:")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–∞—Ç–µ
        if data['transactions']:
            first_date = data['transactions'][0].get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
            if first_date:
                transactions_by_date = get_transactions_by_date(test_file, str(first_date))
                print(f"\nüóìÔ∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {first_date}: {len(transactions_by_date)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É
        purchases = get_transactions_by_type(test_file, '–ü–æ–∫—É–ø–∫–∞')
        print(f"\nüõí –ü–æ–∫—É–ø–æ–∫: {len(purchases)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º
        print(f"\nüíµ –û–±—â–∞—è —Å—É–º–º–∞ (—Ñ—É–Ω–∫—Ü–∏—è): {get_total_amount(test_file):,.2f} —Ç–≥")
        print(f"üíµ –ö –∑–∞—á–∏—Å–ª–µ–Ω–∏—é (—Ñ—É–Ω–∫—Ü–∏—è): {get_total_to_credit(test_file):,.2f} —Ç–≥")
        print(f"üíµ –ö–æ–º–∏—Å—Å–∏—è (—Ñ—É–Ω–∫—Ü–∏—è): {get_total_commission(test_file):,.2f} —Ç–≥")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        print("=" * 60)
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


"""
=============================================================================
–ö–†–ê–¢–ö–û–ï –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ
=============================================================================

0. –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –§–ê–ô–õ–ê (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã):
   
   from utils.terminal_report_parsing import inspect_excel_file
   
   # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞, –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   inspect_excel_file("—Ñ–∞–π–ª.xlsx", max_rows=10)
   
   # –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:
   # python utils/terminal_report_parsing.py inspect


1. –û–°–ù–û–í–ù–û–ô –ü–ê–†–°–ò–ù–ì:
   
   from utils.terminal_report_parsing import parse_terminal_report
   
   data = parse_terminal_report("–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.xlsx")
   
   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏:
   - metadata: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–∏–æ–¥, –ò–ò–ù/–ë–ò–ù, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
   - total_transactions: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   - total_amount: –æ–±—â–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
   - total_to_credit: —Å—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é
   - total_commission: –æ–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è
   - commission_details: –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∏—Å—Å–∏–π
   - transactions: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   - summary: —Å–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è


2. –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –î–ê–¢–ï:
   
   from utils.terminal_report_parsing import get_transactions_by_date
   
   # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD
   transactions = get_transactions_by_date("—Ñ–∞–π–ª.xlsx", "29.09.2025")


3. –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ü–û –¢–ò–ü–£:
   
   from utils.terminal_report_parsing import get_transactions_by_type
   
   purchases = get_transactions_by_type("—Ñ–∞–π–ª.xlsx", "–ü–æ–∫—É–ø–∫–∞")
   refunds = get_transactions_by_type("—Ñ–∞–π–ª.xlsx", "–í–æ–∑–≤—Ä–∞—Ç")


4. –ü–û–õ–£–ß–ï–ù–ò–ï –°–í–û–î–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò:
   
   from utils.terminal_report_parsing import get_transactions_summary
   
   summary = get_transactions_summary("—Ñ–∞–π–ª.xlsx")
   # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∏—Ç–æ–≥–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –æ–ø–ª–∞—Ç—ã


5. –ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–ù–ê–ù–°–û–í–´–• –ò–¢–û–ì–û–í:
   
   from utils.terminal_report_parsing import (
       get_total_amount, 
       get_total_to_credit, 
       get_total_commission
   )
   
   total = get_total_amount("—Ñ–∞–π–ª.xlsx")
   credit = get_total_to_credit("—Ñ–∞–π–ª.xlsx")
   commission = get_total_commission("—Ñ–∞–π–ª.xlsx")


6. –ü–†–Ø–ú–û–ï –ß–¢–ï–ù–ò–ï DATAFRAME:
   
   from utils.terminal_report_parsing import read_terminal_report
   
   df = read_terminal_report("—Ñ–∞–π–ª.xlsx")
   # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç pandas DataFrame —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏


7. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–•:
   
   from utils.terminal_report_parsing import extract_metadata
   
   metadata = extract_metadata("—Ñ–∞–π–ª.xlsx")
   # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {'–ü–µ—Ä–∏–æ–¥': '29.09.2025', '–ò–ò–ù/–ë–ò–ù': '...', ...}

=============================================================================
"""
