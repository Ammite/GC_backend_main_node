# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä PDF –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã (–ë–¶–ö, Kaspi –∏ –¥—Ä.)

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF —Ñ–∞–π–ª–æ–≤ 
—Å –≤—ã–≥—Ä—É–∑–∫–∞–º–∏ –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–ø–ª–∞—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
-----------------
- inspect_pdf_file(file_path) - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- parse_pdf_terminal_report(file_path) - –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ PDF –æ—Ç—á–µ—Ç–∞
- convert_pdf_to_excel(file_path, output_path) - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ Excel
- parse_pdf_directory(directory_path) - –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö PDF –≤ –ø–∞–ø–∫–µ
- compare_pdf_with_db(pdf_path, db) - –ø–∞—Ä—Å–∏–Ω–≥ PDF –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ë–î
- process_pdf_directory_with_db(directory_path, db) - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –∑–∞–ø–∏—Å—å—é –≤ –ë–î

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
-----------
- pdfplumber >= 0.11.0  (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install pdfplumber)
- pandas >= 2.2.3
- openpyxl >= 3.1.5

–£—Å—Ç–∞–Ω–æ–≤–∫–∞:
----------
pip install pdfplumber

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
--------------------
    # 1. –ü–∞—Ä—Å–∏–º PDF –Ω–∞–ø—Ä—è–º—É—é
    from utils.pdf_terminal_report_parsing import parse_pdf_terminal_report
    data = parse_pdf_terminal_report("–≤—ã–ø–∏—Å–∫–∞.pdf")
    print(f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['total_transactions']}")
    
    # 2. –ü–∞—Ä—Å–∏–º PDF –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –ë–î
    from utils.pdf_terminal_report_parsing import compare_pdf_with_db
    from database.database import SessionLocal
    
    db = SessionLocal()
    result = compare_pdf_with_db(
        "–≤—ã–ø–∏—Å–∫–∞.pdf", 
        db,
        amount_tolerance_percent=2.0,
        write_commissions=True,
        dry_run=False
    )
    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['matched']}")
    db.close()
    
    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å PDF
    from utils.pdf_terminal_report_parsing import process_pdf_directory_with_db
    result = process_pdf_directory_with_db(
        "temp_files/terminals_report_pdf",
        db,
        date_from=13,
        date_to=18,
        write_commissions=True
    )
    
    # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Excel (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    from utils.pdf_terminal_report_parsing import convert_pdf_to_excel
    from utils.terminal_report_parsing import parse_terminal_report
    
    convert_pdf_to_excel("–≤—ã–ø–∏—Å–∫–∞.pdf", "–≤—ã–ø–∏—Å–∫–∞.xlsx")
    data = parse_terminal_report("–≤—ã–ø–∏—Å–∫–∞.xlsx")

CLI —Å–∫—Ä–∏–ø—Ç:
-----------
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ process_pdf_commissions.py –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    python process_pdf_commissions.py --pdf-file "–≤—ã–ø–∏—Å–∫–∞.pdf" --dry-run
    python process_pdf_commissions.py --pdf-directory "temp_files/terminals_report_pdf" --write-commissions
"""

import os
import sys
from typing import Dict, List, Optional, Any
import pandas as pd
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    if hasattr(sys.stdout, 'buffer'):
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    if hasattr(sys.stderr, 'buffer'):
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')


def check_pdfplumber_installed() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ pdfplumber.
    
    Returns:
        True –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        import pdfplumber
        return True
    except ImportError:
        return False


def install_pdfplumber_instructions():
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ pdfplumber.
    """
    print("\n" + "=" * 80)
    print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –£–°–¢–ê–ù–û–í–ö–ê –ë–ò–ë–õ–ò–û–¢–ï–ö–ò pdfplumber")
    print("=" * 80)
    print("\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF —Ñ–∞–π–ª–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É pdfplumber.")
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞:")
    print("   pip install pdfplumber")
    print("\n–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ requirements.txt:")
    print("   pdfplumber==0.11.0")
    print("\n–ò –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   pip install -r requirements.txt")
    print("\n" + "=" * 80)


def inspect_pdf_file(file_path: str, max_pages: int = 3) -> None:
    """
    –î–µ—Ç–∞–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    """
    if not check_pdfplumber_installed():
        install_pdfplumber_instructions()
        return
    
    import pdfplumber
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return
    
    print("=" * 80)
    print("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† PDF –§–ê–ô–õ–ê")
    print("=" * 80)
    print(f"\nüìÅ –§–∞–π–ª: {file_path}")
    
    try:
        with pdfplumber.open(file_path) as pdf:
            print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {len(pdf.pages)}")
            
            if pdf.metadata:
                print(f"\nüìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                for key, value in pdf.metadata.items():
                    if value:
                        print(f"   {key}: {value}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            for page_num, page in enumerate(pdf.pages[:max_pages], 1):
                print(f"\n{'='*80}")
                print(f"üìÑ –°–¢–†–ê–ù–ò–¶–ê {page_num}")
                print('='*80)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                text = page.extract_text()
                if text:
                    print(f"\nüìù –¢–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):")
                    print("-" * 80)
                    print(text[:1000])
                    if len(text) > 1000:
                        print(f"\n... (–≤—Å–µ–≥–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                tables = page.extract_tables()
                if tables:
                    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                    
                    for table_idx, table in enumerate(tables, 1):
                        print(f"\n   –¢–∞–±–ª–∏—Ü–∞ #{table_idx}:")
                        print(f"   –†–∞–∑–º–µ—Ä: {len(table)} —Å—Ç—Ä–æ–∫ √ó {len(table[0]) if table else 0} –∫–æ–ª–æ–Ω–æ–∫")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                        if table:
                            print(f"\n   –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞):")
                            headers = table[0]
                            for col_idx, header in enumerate(headers[:10], 1):  # –ü–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
                                if header:
                                    print(f"      {col_idx}. {header}")
                            
                            print(f"\n   –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏):")
                            for row_idx, row in enumerate(table[1:4], 1):
                                print(f"\n      –°—Ç—Ä–æ–∫–∞ {row_idx}:")
                                for col_idx, cell in enumerate(row[:10], 1):  # –ü–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
                                    if cell and str(cell).strip():
                                        print(f"         –ö–æ–ª–æ–Ω–∫–∞ {col_idx}: {cell}")
        
        print(f"\n{'='*80}")
        print("‚úÖ –ü–†–û–°–ú–û–¢–† –ó–ê–í–ï–†–®–ï–ù")
        print('='*80)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF: {e}")
        import traceback
        traceback.print_exc()


def extract_tables_from_pdf(file_path: str) -> List[pd.DataFrame]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PDF —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        
    Returns:
        –°–ø–∏—Å–æ–∫ pandas DataFrame —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏–∑ PDF
    """
    if not check_pdfplumber_installed():
        install_pdfplumber_instructions()
        return []
    
    import pdfplumber
    
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    all_tables = []
    
    try:
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                tables = page.extract_tables()
                for table in tables:
                    if table:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                        df = pd.DataFrame(table[1:], columns=table[0])
                        all_tables.append(df)
        
        return all_tables
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü –∏–∑ PDF: {str(e)}")


def convert_pdf_to_excel(
    pdf_path: str,
    excel_path: Optional[str] = None,
    verbose: bool = True
) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç –≤ Excel —Ñ–∞–π–ª.
    –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Å–µ—Ä terminal_report_parsing.py
    
    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        excel_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É Excel —Ñ–∞–π–ª—É
    """
    if not check_pdfplumber_installed():
        install_pdfplumber_instructions()
        raise ImportError("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pdfplumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    import pdfplumber
    
    if not os.path.exists(pdf_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è Excel —Ñ–∞–π–ª–∞
    if excel_path is None:
        excel_path = pdf_path.rsplit('.', 1)[0] + '.xlsx'
    
    if verbose:
        print(f"\n{'='*80}")
        print(f"üîÑ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø PDF ‚Üí EXCEL")
        print('='*80)
        print(f"\n–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {pdf_path}")
        print(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {excel_path}")
    
    try:
        with pdfplumber.open(pdf_path) as pdf:
            # –°–æ–∑–¥–∞–µ–º Excel writer
            with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                for page_num, page in enumerate(pdf.pages, 1):
                    if verbose:
                        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}/{len(pdf.pages)}...")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    tables = page.extract_tables()
                    
                    if tables:
                        for table_idx, table in enumerate(tables, 1):
                            if table:
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                                df = pd.DataFrame(table[1:], columns=table[0])
                                
                                # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                                df = df.dropna(how='all')
                                
                                # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
                                sheet_name = f"Page{page_num}_Table{table_idx}"
                                if len(sheet_name) > 31:  # Excel –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
                                    sheet_name = f"P{page_num}_T{table_idx}"
                                
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
                                df.to_excel(writer, sheet_name=sheet_name, index=False)
                                
                                if verbose:
                                    print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_idx}: {len(df)} —Å—Ç—Ä–æ–∫ √ó {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫ ‚Üí {sheet_name}")
        
        if verbose:
            print(f"\n{'='*80}")
            print(f"‚úÖ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
            print(f"   –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_path}")
            print('='*80)
        
        return excel_path
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ Excel: {str(e)}")


def _normalize_bck_transaction(transaction: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –ë–¶–ö —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    
    –ë–¶–ö —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –≤—Ä–æ–¥–µ:
    - "–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"  
    - "–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤–∞–ª—é—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
    - "–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏"
    """
    normalized = {}
    
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ "–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
    date_str = transaction.get('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n–∫“Ø–Ω—ñ / –î–∞—Ç–∞\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏') or transaction.get('–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    
    if date_str and isinstance(date_str, str):
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        date_str = date_str.replace('\n', '').replace(' ', '').strip()
        
        # –§–æ—Ä–º–∞—Ç: 2025-10-15T19:04:27Z
        try:
            if 'T' in date_str:
                date_part, time_part = date_str.split('T')
                time_part = time_part.rstrip('Z')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ DD.MM.YYYY
                if '-' in date_part:
                    year, month, day = date_part.split('-')
                    normalized['–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'] = f"{day}.{month}.{year}"
                
                # –í—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
                if ':' in time_part:
                    normalized['–í—Ä–µ–º—è'] = time_part
        except:
            pass
    
    # –ê–¥—Ä–µ—Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ - –∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
    address = None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    exact_keys = [
        '“ö“±—Ä—ã–ª“ì—ã–Ω—ã –æ—Ä–Ω–∞—Ç—É\n–º–µ–∫–µ–Ω–∂–∞–π—ã / –ê–¥—Ä–µ—Å\n—É—Å—Ç–∞–Ω–æ–≤–∫–∏\n—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
        '“ö“±—Ä—ã–ª“ì—ã–Ω—ã\n–æ—Ä–Ω–∞—Ç—É\n–º–µ–∫–µ–Ω–∂–∞–π—ã /\n–ê–¥—Ä–µ—Å\n—É—Å—Ç–∞–Ω–æ–≤–∫–∏\n—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
        '–ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
        '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n–º–µ–∫–µ–Ω–∂–∞–π—ã /\n–ê–¥—Ä–µ—Å\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
        '–ê–¥—Ä–µ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
    ]
    
    for key in exact_keys:
        if transaction.get(key):
            address = transaction.get(key)
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    if not address:
        for key, value in transaction.items():
            if value and ('—É—Å—Ç–∞–Ω–æ–≤–∫–∏' in key.lower() and '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' in key.lower()):
                address = value
                break
    
    if address:
        # –û—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        address_clean = str(address).replace('\n', ' ').replace('\r', '').strip()
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        address_clean = ' '.join(address_clean.split())
        normalized['–ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'] = address_clean
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å: {address_clean}")
    else:
        print(f"   ‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    amount_str = None
    for key, value in transaction.items():
        if value and ('–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' in key or '—Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' in key.lower()):
            amount_str = value
            break
    
    if amount_str:
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–ø—è—Ç—ã–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            amount_clean = str(amount_str).replace(' ', '').replace(',', '').replace('\n', '')
            normalized['–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)'] = float(amount_clean)
        except:
            pass
    
    # –ö–æ–º–∏—Å—Å–∏—è - –∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    commission_found = False
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ø–æ–ª—è—Ö —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    commission_fields = [
        '–ö–æ–º–∏—Å—Å–∏—è\n—Å–æ–º–∞—Å—ã /\n–°—É–º–º–∞\n–∫–æ–º–∏—Å—Å–∏–∏',
        '–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏',
        '–ö–æ–º–∏—Å—Å–∏—è —Å–æ–º–∞—Å—ã / –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏',
        '–ë”©–ª—ñ–ø —Ç”©–ª–µ—É “Ø—à—ñ–Ω\n–±–∞–Ω–∫ –∫–æ–º–∏—Å—Å–∏—è—Å—ã /\n–°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏\n–±–∞–Ω–∫–∞ –∑–∞ —Ä–∞—Å—Å—Ä–æ—á–∫—É',
        '–ö—ç—à–±—ç–∫ “Ø—à—ñ–Ω –±–∞–Ω–∫\n–∫–æ–º–∏—Å—Å–∏—è—Å—ã–Ω—ã“£\n—Å–æ–º–∞—Å—ã / –°—É–º–º–∞\n–∫–æ–º–∏—Å—Å–∏–∏ –±–∞–Ω–∫–∞ –∑–∞\n–∫—ç—à–±–µ–∫'
    ]
    
    for field in commission_fields:
        if field in transaction and transaction[field]:
            try:
                commission_clean = str(transaction[field]).strip().replace('\n', '').replace('\r', '').replace(' ', '').replace(',', '')
                if commission_clean and commission_clean.replace('.', '').replace('-', '').isdigit():
                    normalized['–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞'] = abs(float(commission_clean))
                    commission_found = True
                    break
            except:
                pass
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª—è—Ö, –ø—Ä–æ–±—É–µ–º "–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞"
    if not commission_found:
        commission_str = None
        for key, value in transaction.items():
            if value and ('–û–±—â–∞—è\n–∫–æ–º–∏—Å—Å–∏—è\n–±–∞–Ω–∫–∞' in key or '–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞' in key):
                commission_str = value
                break
        
        if commission_str:
            try:
                commission_clean = str(commission_str).strip().replace('\n', '').replace('\r', '').replace(' ', '').replace(',', '')
                if commission_clean and commission_clean.replace('.', '').replace('-', '').isdigit():
                    normalized['–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞'] = abs(float(commission_clean))
                else:
                    print(f"   ‚ö†Ô∏è –ü–æ–ª–µ '–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {commission_str}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞' –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {commission_str} - {e}")
    
    # –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
    card_number = transaction.get('–ö–∞—Ä—Ç–∞ –Ω”©–º—ñ—Ä—ñ /\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã') or transaction.get('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')
    if card_number:
        normalized['–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'] = str(card_number)
    
    # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation_type = (transaction.get('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\n–∞—Ç–∞—É—ã /\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏') or
                     transaction.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'))
    if operation_type:
        normalized['–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏'] = '–ü–æ–∫—É–ø–∫–∞'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        normalized['–¢–∏–ø –æ–ø–ª–∞—Ç—ã'] = str(operation_type)
    
    return normalized


def parse_pdf_terminal_report(file_path: str, verbose: bool = False) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç PDF –æ—Ç—á–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    
    Args:
        file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ —É parse_terminal_report)
    """
    if not check_pdfplumber_installed():
        install_pdfplumber_instructions()
        raise ImportError("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pdfplumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    import pdfplumber
    
    if verbose:
        print(f"\n{'='*80}")
        print(f"üìÑ –ü–ê–†–°–ò–ù–ì PDF: {os.path.basename(file_path)}")
        print('='*80)
    
    try:
        transactions = []
        all_tables_data = []
        
        with pdfplumber.open(file_path) as pdf:
            if verbose:
                print(f"\nüìä –°—Ç—Ä–∞–Ω–∏—Ü –≤ PDF: {len(pdf.pages)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            for page_num, page in enumerate(pdf.pages, 1):
                if verbose:
                    print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")
                
                tables = page.extract_tables()
                
                for table_idx, table in enumerate(tables, 1):
                    if table and len(table) > 1:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                        df = pd.DataFrame(table[1:], columns=table[0])
                        
                        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        df = df.dropna(how='all')
                        
                        if len(df) > 0:
                            all_tables_data.append(df)
                            
                            if verbose:
                                print(f"   –¢–∞–±–ª–∏—Ü–∞ {table_idx}: {len(df)} —Å—Ç—Ä–æ–∫ √ó {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        if not all_tables_data:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ PDF")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        if len(all_tables_data) > 1:
            df_combined = pd.concat(all_tables_data, ignore_index=True)
        else:
            df_combined = all_tables_data[0]
        
        if verbose:
            print(f"\n‚úÖ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(df_combined)}")
            print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df_combined.columns)}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        columns_str = ' '.join([str(col) for col in df_combined.columns])
        
        if '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è' in columns_str and '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' in columns_str:
            report_type = "bank_statement"
        elif '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏' in columns_str and '–í—Ä–µ–º—è' in columns_str:
            report_type = "kaspi_detailed"
        elif '–î–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' in columns_str or '–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' in columns_str:
            report_type = "bank_statement_bck"  # –ë–¶–ö —Ñ–æ—Ä–º–∞—Ç
        else:
            report_type = "unknown"
        
        if verbose:
            print(f"\nüìã –¢–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        for idx, row in df_combined.iterrows():
            transaction = {}
            for col in df_combined.columns:
                value = row[col]
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º NaN –≤ None
                if pd.isna(value):
                    transaction[col] = None
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Timestamp –≤ —Å—Ç—Ä–æ–∫—É
                elif isinstance(value, pd.Timestamp):
                    transaction[col] = value.strftime('%Y-%m-%d %H:%M:%S')
                else:
                    transaction[col] = value
            
            # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ë–¶–ö —Ñ–æ—Ä–º–∞—Ç–∞
            if report_type == "bank_statement_bck":
                normalized = _normalize_bck_transaction(transaction)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
                try:
                    from utils.terminal_report_parsing import normalize_transaction_fields
                    normalized = normalize_transaction_fields(transaction, report_type)
                except:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –µ—Å—Ç—å
                    normalized = transaction
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—É–º–º–∞
            if normalized.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)') or normalized.get('–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'):
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                # –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
                address = (normalized.get('–ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞') or 
                          normalized.get('–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂') or 
                          normalized.get('–ê–¥—Ä–µ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'))
                
                # print(f"\nüìç –û—Ç–ª–∞–¥–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                # print(f"   '–ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞': {normalized.get('–ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')}")
                # print(f"   '–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂': {normalized.get('–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂')}")
                # print(f"   '–ê–¥—Ä–µ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': {normalized.get('–ê–¥—Ä–µ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}")
                # print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {address}")
                
                if address and str(address).strip():
                    normalized['terminal_address'] = str(address).strip()
                    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω terminal_address: {normalized['terminal_address']}")
                else:
                    print(f"   ‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                
                transactions.append(normalized)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        total_amount = 0.0
        total_commission = 0.0
        
        for trans in transactions:
            amount = trans.get('–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç)', 0)
            if amount:
                try:
                    total_amount += float(amount)
                except:
                    pass
            
            # –ö–æ–º–∏—Å—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û "–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞" –µ—Å–ª–∏ –µ—Å—Ç—å
            total_commission_value = trans.get('–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞')
            if total_commission_value:
                try:
                    # –¢—Ä–∏–º–º–∏–º –∏ —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    commission_clean = str(total_commission_value).strip().replace('\n', '').replace('\r', '').replace(' ', '')
                    if commission_clean:
                        total_commission = abs(float(commission_clean))
                        continue
                except Exception as e:
                    if verbose:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞': {total_commission_value} - {e}")
            else:
                if verbose:
                    print(f"   ‚ö†Ô∏è –ü–æ–ª–µ '–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        if verbose:
            print(f"\nüí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")
            print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ç–≥")
            print(f"   –ö–æ–º–∏—Å—Å–∏—è: {total_commission:,.2f} —Ç–≥")
        
        return {
            'file_path': file_path,
            'source_type': 'pdf',
            'report_type': report_type,
            'metadata': {'report_type': report_type},
            'total_transactions': len(transactions),
            'total_amount': total_amount,
            'total_to_credit': total_amount - total_commission,
            'total_commission': total_commission,
            'transactions': transactions,
            'summary': {
                'columns': list(df_combined.columns),
                'first_transaction': transactions[0] if transactions else None,
                'last_transaction': transactions[-1] if transactions else None,
            }
        }
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ PDF: {str(e)}")


def parse_pdf_directory(
    directory_path: str,
    file_pattern: str = "*.pdf",
    verbose: bool = True,
    date_from: Optional[int] = None,
    date_to: Optional[int] = None
) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Å–µ PDF –æ—Ç—á–µ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
    
    Args:
        directory_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å PDF –æ—Ç—á–µ—Ç–∞–º–∏
        file_pattern: –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "*.pdf")
        verbose: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        date_from: –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        date_to: –ö–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if not check_pdfplumber_installed():
        install_pdfplumber_instructions()
        raise ImportError("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pdfplumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    import glob
    
    if not os.path.exists(directory_path):
        raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}")
    
    # –ò—â–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    search_pattern = os.path.join(directory_path, file_pattern)
    files = glob.glob(search_pattern)
    
    if verbose:
        print("\n" + "=" * 80)
        print("üìÇ –ü–ê–†–°–ò–ù–ì –ü–ê–ü–ö–ò –° PDF –û–¢–ß–ï–¢–ê–ú–ò –¢–ï–†–ú–ò–ù–ê–õ–û–í")
        print("=" * 80)
        print(f"\nüìÅ –ü–∞–ø–∫–∞: {directory_path}")
        print(f"üîç –®–∞–±–ª–æ–Ω: {file_pattern}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        if date_from is not None or date_to is not None:
            print(f"üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: {date_from if date_from else 1} - {date_to if date_to else 31} —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞")
        print()
    
    reports = []
    failed_reports = []
    total_transactions = 0
    total_amount = 0.0
    total_commission = 0.0
    
    for idx, pdf_path in enumerate(files, 1):
        file_name = os.path.basename(pdf_path)
        
        if verbose:
            print(f"\n{'='*80}")
            print(f"üìÑ –§–∞–π–ª {idx}/{len(files)}: {file_name}")
            print('='*80)
        
        try:
            # –ü–∞—Ä—Å–∏–º PDF –Ω–∞–ø—Ä—è–º—É—é
            report_data = parse_pdf_terminal_report(pdf_path, verbose=False)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if date_from is not None or date_to is not None:
                from utils.terminal_report_parsing import parse_terminals_directory
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
                # (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
                original_count = len(report_data['transactions'])
                filtered_transactions = []
                
                for transaction in report_data['transactions']:
                    date_str = transaction.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
                    if date_str:
                        try:
                            if isinstance(date_str, str):
                                parts = date_str.split('.')
                                if len(parts) == 3:
                                    day = int(parts[0])
                                    if date_from is not None and day < date_from:
                                        continue
                                    if date_to is not None and day > date_to:
                                        continue
                                    filtered_transactions.append(transaction)
                            elif isinstance(date_str, (datetime, pd.Timestamp)):
                                day = date_str.day
                                if date_from is not None and day < date_from:
                                    continue
                                if date_to is not None and day > date_to:
                                    continue
                                filtered_transactions.append(transaction)
                        except:
                            pass
                
                report_data['transactions'] = filtered_transactions
                report_data['total_transactions'] = len(filtered_transactions)
                
                if verbose and original_count != len(filtered_transactions):
                    print(f"\n   üìÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è:")
                    print(f"      –î–æ: {original_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                    print(f"      –ü–æ—Å–ª–µ: {len(filtered_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
            report_data['source_type'] = 'pdf'
            report_data['original_file'] = pdf_path
            report_data['file_name'] = file_name
            
            reports.append(report_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_transactions += report_data['total_transactions']
            total_amount += report_data['total_amount']
            total_commission += report_data['total_commission']
            
            if verbose:
                print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {report_data['total_transactions']}")
                print(f"   –°—É–º–º–∞: {report_data['total_amount']:,.2f} —Ç–≥")
        
        except Exception as e:
            failed_reports.append({
                'file_name': file_name,
                'file_path': pdf_path,
                'error': str(e)
            })
            
            if verbose:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if verbose:
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 80)
        print(f"\nüìÅ –§–∞–π–ª—ã:")
        print(f"   –í—Å–µ–≥–æ: {len(files)}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(reports)}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {len(failed_reports)}")
        
        print(f"\nüí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        print(f"   –í—Å–µ–≥–æ: {total_transactions}")
        print(f"   –°—É–º–º–∞: {total_amount:,.2f} —Ç–≥")
        print(f"   –ö–æ–º–∏—Å—Å–∏—è: {total_commission:,.2f} —Ç–≥")
        
        if failed_reports:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for failed in failed_reports:
                print(f"   ‚Ä¢ {failed['file_name']}: {failed['error']}")
        
        print("\n" + "=" * 80)
    
    return {
        'total_files': len(files),
        'success_files': len(reports),
        'failed_files': len(failed_reports),
        'total_transactions': total_transactions,
        'total_amount': total_amount,
        'total_commission': total_commission,
        'reports': reports,
        'failed_reports': failed_reports
    }


def compare_pdf_with_db(
    pdf_path: str,
    db,
    amount_tolerance_percent: float = 2.0,
    write_commissions: bool = False,
    verbose: bool = True,
    date_from: Optional[int] = None,
    date_to: Optional[int] = None,
    save_not_matched_to: Optional[str] = None,
    dry_run: bool = True
) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç PDF –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ë–î –Ω–∞–ø—Ä—è–º—É—é (–ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è Excel).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–æ–≤.
    
    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        db: SQLAlchemy —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        amount_tolerance_percent: –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—É–º–º–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0%)
        write_commissions: –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–∏ –∫–æ–º–∏—Å—Å–∏–∏ –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
        verbose: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        date_from: –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 13
        date_to: –ö–æ–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 18
        save_not_matched_to: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –¥–ª—è –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        dry_run: –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:
        {
            'total_transactions': int,           # –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ PDF
            'matched': int,                      # –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –ë–î
            'not_matched': int,                  # –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î
            'match_percentage': float,           # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            'commissions_written': int,          # –ó–∞–ø–∏—Å–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π (–µ—Å–ª–∏ write_commissions=True)
            'matched_transactions': list,        # –°–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            'not_matched_transactions': list,    # –°–ø–∏—Å–æ–∫ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        }
    """
    from utils.terminal_report_parsing import (
        match_transaction_with_order,
        calculate_commission,
        update_order_commission,
        save_not_matched_transactions
    )
    
    if verbose:
        print("\n" + "=" * 80)
        print("üîç –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï PDF –° –ë–î")
        print("=" * 80)
        
        if dry_run:
            print("\n‚ö†Ô∏è  –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (dry_run=True) - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")
        else:
            print("\n‚úÖ –†–ï–ñ–ò–ú –ó–ê–ü–ò–°–ò (dry_run=False) - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ë–£–î–£–¢ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")
    
    # 1. –ü–∞—Ä—Å–∏–º PDF
    data = parse_pdf_terminal_report(pdf_path, verbose=verbose)
    transactions = data['transactions']
    
    # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if date_from is not None or date_to is not None:
        filtered_transactions = []
        for transaction in transactions:
            date_str = transaction.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏')
            if date_str:
                try:
                    if isinstance(date_str, str):
                        parts = date_str.split('.')
                        if len(parts) == 3:
                            day = int(parts[0])
                            if date_from is not None and day < date_from:
                                continue
                            if date_to is not None and day > date_to:
                                continue
                            filtered_transactions.append(transaction)
                    elif isinstance(date_str, (datetime, pd.Timestamp)):
                        day = date_str.day
                        if date_from is not None and day < date_from:
                            continue
                        if date_to is not None and day > date_to:
                            continue
                        filtered_transactions.append(transaction)
                except:
                    pass
        
        if verbose:
            print(f"\nüìÖ –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º: {date_from if date_from else 1} - {date_to if date_to else 31} —á–∏—Å–ª–æ")
            print(f"   –î–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            print(f"   –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        transactions = filtered_transactions
    
    if verbose:
        print(f"\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:")
        print(f"  - –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—É–º–º–µ: ¬±{amount_tolerance_percent}%")
        print(f"  - –ó–∞–ø–∏—Å—å –∫–æ–º–∏—Å—Å–∏–π: {'–î–ê' if write_commissions else '–ù–ï–¢'}")
        print(f"\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    # 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –ë–î
    matched_transactions = []
    not_matched_transactions = []
    commissions_written = 0
    used_payment_transactions = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤
    
    for idx, transaction in enumerate(transactions, 1):
        if not verbose and idx % 10 == 0:
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
        match = match_transaction_with_order(
            transaction,
            db,
            time_tolerance_minutes=15,  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            amount_tolerance_percent=amount_tolerance_percent,
            verbose_logging=verbose,
            transaction_num=idx,
            used_payment_transactions=used_payment_transactions
        )
        
        if match:
            # –î–æ–±–∞–≤–ª—è–µ–º payment_transaction_id –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
            payment_id = match.get('payment_transaction_id')
            if payment_id:
                used_payment_transactions.add(payment_id)
            
            matched_transactions.append({
                'terminal_transaction': transaction,
                'order': match['order'],
                'check_sales': match['check_sales'],
                'payment_transaction_id': payment_id,
                'check_sum': match['check_sum'],
                'is_multi_check_order': match.get('is_multi_check_order', False),
                'order_checks_count': match.get('order_checks_count', 1),
                'match_confidence': match['match_confidence']
            })
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ dry_run)
            if write_commissions and not dry_run:
                commission = calculate_commission(transaction)
                if commission > 0:
                    order = match['order']
                    is_multi_check = match.get('is_multi_check_order', False)
                    
                    if is_multi_check:
                        # –ó–∞–∫–∞–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–µ–∫–∞–º–∏ - –°–£–ú–ú–ò–†–£–ï–ú
                        existing_commission = float(order.bank_commission or 0)
                        total_commission = existing_commission + commission
                        
                        success = update_order_commission(order.id, total_commission, db)
                        if success:
                            commissions_written += 1
                    else:
                        # –ó–∞–∫–∞–∑ —Å –æ–¥–Ω–∏–º —á–µ–∫–æ–º - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                        success = update_order_commission(order.id, commission, db)
                        if success:
                            commissions_written += 1
        else:
            not_matched_transactions.append(transaction)
    
    # 4. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = len(transactions)
    matched = len(matched_transactions)
    not_matched = len(not_matched_transactions)
    match_percentage = (matched / total * 100) if total > 0 else 0
    
    result = {
        'total_transactions': total,
        'matched': matched,
        'not_matched': not_matched,
        'match_percentage': match_percentage,
        'commissions_written': commissions_written,
        'matched_transactions': matched_transactions,
        'not_matched_transactions': not_matched_transactions,
        'terminal_total_amount': data['total_amount'],
        'terminal_total_commission': data['total_commission'],
    }
    
    if verbose:
        print("\n" + "=" * 80)
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
        print("=" * 80)
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matched} ({match_percentage:.1f}%)")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_matched} ({100 - match_percentage:.1f}%)")
        print(f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total}")
        
        if write_commissions:
            print(f"\nüíæ –ó–∞–ø–∏—Å–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {commissions_written}")
        
        print(f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {data['total_amount']:,.2f} —Ç–≥")
        print(f"  - –ö–æ–º–∏—Å—Å–∏—è: {data['total_commission']:,.2f} —Ç–≥")
    
    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if save_not_matched_to and not_matched_transactions:
        metadata = {
            'source_file': pdf_path,
            'source_type': 'pdf',
            'processing_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_transactions': total,
            'matched': matched,
            'not_matched': not_matched,
            'match_percentage': match_percentage,
            'parameters': {
                'amount_tolerance_percent': amount_tolerance_percent,
                'date_from': date_from,
                'date_to': date_to
            }
        }
        
        save_not_matched_transactions(
            not_matched_transactions,
            save_not_matched_to,
            metadata
        )
        
        if verbose:
            print(f"\nüíæ –ù–µ—Å–æ–≤–ø–∞–≤—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {save_not_matched_to}")
    
    return result


def process_pdf_directory_with_db(
    directory_path: str,
    db,
    amount_tolerance_percent: float = 2.0,
    write_commissions: bool = False,
    verbose: bool = True,
    date_from: Optional[int] = None,
    date_to: Optional[int] = None,
    save_not_matched_to: Optional[str] = None,
    dry_run: bool = True
) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Å–µ PDF –∏–∑ –ø–∞–ø–∫–∏ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å –ë–î.
    
    Args:
        directory_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å PDF
        db: SQLAlchemy —Å–µ—Å—Å–∏—è
        amount_tolerance_percent: –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å—É–º–º–µ
        write_commissions: –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –ª–∏ –∫–æ–º–∏—Å—Å–∏–∏
        verbose: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        date_from: –° –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞
        date_to: –ü–æ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ
        save_not_matched_to: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö
        
    Returns:
        –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º
    """
    import glob
    
    if verbose:
        print("\n" + "=" * 80)
        print("üîç –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–ü–ö–ò –° PDF + –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –° –ë–î")
        print("=" * 80)
    
    files = glob.glob(os.path.join(directory_path, "*.pdf"))
    
    if verbose:
        print(f"\nüìÅ –ü–∞–ø–∫–∞: {directory_path}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {len(files)}")
        if date_from or date_to:
            print(f"üìÖ –§–∏–ª—å—Ç—Ä: {date_from or 1} - {date_to or 31} —á–∏—Å–ª–æ")
        print()
    
    total_matched = 0
    total_not_matched = 0
    total_commissions_written = 0
    all_not_matched = []
    file_results = []
    
    for idx, pdf_path in enumerate(files, 1):
        file_name = os.path.basename(pdf_path)
        
        if verbose:
            print(f"\n{'='*80}")
            print(f"üìÑ –§–∞–π–ª {idx}/{len(files)}: {file_name}")
            print('='*80)
        
        try:
            result = compare_pdf_with_db(
                pdf_path,
                db,
                amount_tolerance_percent=amount_tolerance_percent,
                write_commissions=write_commissions,
                verbose=verbose,
                date_from=date_from,
                date_to=date_to,
                save_not_matched_to=None,  # –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                dry_run=dry_run
            )
            
            total_matched += result['matched']
            total_not_matched += result['not_matched']
            total_commissions_written += result['commissions_written']
            all_not_matched.extend(result['not_matched_transactions'])
            
            file_results.append({
                'file_name': file_name,
                'result': result
            })
            
        except Exception as e:
            if verbose:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if verbose:
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –§–ê–ô–õ–ê–ú")
        print("=" * 80)
        print(f"\n‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: {total_matched}")
        print(f"‚ùå –í—Å–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {total_not_matched}")
        
        if total_matched + total_not_matched > 0:
            match_percent = (total_matched / (total_matched + total_not_matched)) * 100
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {match_percent:.1f}%")
        
        if write_commissions:
            print(f"\nüíæ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {total_commissions_written}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ
    if save_not_matched_to and all_not_matched:
        from utils.terminal_report_parsing import save_not_matched_transactions
        
        metadata = {
            'source_directory': directory_path,
            'source_type': 'pdf_directory',
            'total_files': len(files),
            'processing_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'total_matched': total_matched,
            'total_not_matched': total_not_matched,
            'parameters': {
                'amount_tolerance_percent': amount_tolerance_percent,
                'date_from': date_from,
                'date_to': date_to
            }
        }
        
        save_not_matched_transactions(all_not_matched, save_not_matched_to, metadata)
        
        if verbose:
            print(f"\nüíæ –ù–µ—Å–æ–≤–ø–∞–≤—à–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {save_not_matched_to}")
    
    return {
        'total_files': len(files),
        'total_matched': total_matched,
        'total_not_matched': total_not_matched,
        'total_commissions_written': total_commissions_written,
        'file_results': file_results,
        'all_not_matched_transactions': all_not_matched
    }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == 'inspect':
            # –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF
            test_file = r"temp_files\terminals_report_pdf\–ë–¶–ö –í—ã–ø–∏—Å–∫–∞ POS —Å 2025-10-13 –ø–æ 2025-10-19 (1).pdf"
            if len(sys.argv) > 2:
                test_file = sys.argv[2]
            
            print("üîç –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê PDF –§–ê–ô–õ–ê\n")
            inspect_pdf_file(test_file, max_pages=2)
            sys.exit(0)
        
        elif sys.argv[1] == 'convert':
            # –†–µ–∂–∏–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            test_file = r"temp_files\terminals_report_pdf\–ë–¶–ö –í—ã–ø–∏—Å–∫–∞ POS —Å 2025-10-13 –ø–æ 2025-10-19 (1).pdf"
            if len(sys.argv) > 2:
                test_file = sys.argv[2]
            
            print("üîÑ –†–ï–ñ–ò–ú –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò PDF ‚Üí EXCEL\n")
            excel_path = convert_pdf_to_excel(test_file, verbose=True)
            print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª: {excel_path}")
            sys.exit(0)
        
        elif sys.argv[1] == 'parse':
            # –†–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            test_file = r"temp_files\terminals_report_pdf\–ë–¶–ö –í—ã–ø–∏—Å–∫–∞ POS —Å 2025-10-13 –ø–æ 2025-10-19 (1).pdf"
            if len(sys.argv) > 2:
                test_file = sys.argv[2]
            
            print("üìã –†–ï–ñ–ò–ú –ü–ê–†–°–ò–ù–ì–ê PDF\n")
            data = parse_pdf_terminal_report(test_file, verbose=True)
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data['total_transactions']}")
            print(f"   –°—É–º–º–∞: {data['total_amount']:,.2f} —Ç–≥")
            print(f"   –ö–æ–º–∏—Å—Å–∏—è: {data['total_commission']:,.2f} —Ç–≥")
            sys.exit(0)
        
        elif sys.argv[1] == 'directory':
            # –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞–ø–∫–∏
            test_dir = r"temp_files\terminals_report_pdf"
            if len(sys.argv) > 2:
                test_dir = sys.argv[2]
            
            print("üìÇ –†–ï–ñ–ò–ú –ü–ê–†–°–ò–ù–ì–ê –ü–ê–ü–ö–ò –° PDF\n")
            result = parse_pdf_directory(test_dir, verbose=True)
            
            print(f"\n‚úÖ –ò—Ç–æ–≥–æ:")
            print(f"   –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['success_files']}/{result['total_files']}")
            print(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['total_transactions']}")
            print(f"   –°—É–º–º–∞: {result['total_amount']:,.2f} —Ç–≥")
            sys.exit(0)
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–ø—Ä–∞–≤–∫–∞
    print("=" * 80)
    print("PDF –ü–ê–†–°–ï–† –û–¢–ß–ï–¢–û–í –¢–ï–†–ú–ò–ù–ê–õ–û–í")
    print("=" * 80)
    print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python utils/pdf_terminal_report_parsing.py inspect [—Ñ–∞–π–ª.pdf]")
    print("  python utils/pdf_terminal_report_parsing.py convert [—Ñ–∞–π–ª.pdf]")
    print("  python utils/pdf_terminal_report_parsing.py parse [—Ñ–∞–π–ª.pdf]")
    print("  python utils/pdf_terminal_report_parsing.py directory [–ø–∞–ø–∫–∞]")
    print("\n–ü—Ä–∏–º–µ—Ä—ã:")
    print('  python utils/pdf_terminal_report_parsing.py inspect "–≤—ã–ø–∏—Å–∫–∞.pdf"')
    print('  python utils/pdf_terminal_report_parsing.py directory temp_files/terminals_report_pdf')
    print("\n" + "=" * 80)

