"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ (d_orders –∏ t_orders) –∏–∑ –∑–∞–ø–∏—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã sales.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sales (–æ—Ç—á–µ—Ç—ã –∏–∑ iiko) 
–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö d_orders –∏ t_orders.

–í–ê–ñ–ù–û: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ sales:
- –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å sales = –æ–¥–Ω–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ (–Ω–µ –≤–µ—Å—å –∑–∞–∫–∞–∑!)
- –ï—Å–ª–∏ –≤ –∑–∞–∫–∞–∑–µ 3 –±–ª—é–¥–∞ ‚Üí 3 –∑–∞–ø–∏—Å–∏ –≤ sales —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º order_id
- –£ sales –ù–ï–¢ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–æ–∑–∏—Ü–∏–π:
  * item_sale_event_id - —ç—Ç–æ –ù–ï iiko_id
  * item_sale_event_id –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è
- –ü–æ—ç—Ç–æ–º—É TOrder —Å–æ–∑–¥–∞—é—Ç—Å—è –ë–ï–ó iiko_id (–±—É–¥–µ—Ç NULL)

–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ sales –ø–æ order_id
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ order_id —Å–æ–∑–¥–∞–µ–º –û–î–ò–ù –∑–∞–∫–∞–∑ –≤ d_orders
3. –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ sales —Å–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ t_orders
"""

from sqlalchemy.orm import Session
from sqlalchemy import func
from typing import Dict, List, Optional
from datetime import datetime
from decimal import Decimal

from models.sales import Sales
from models.d_order import DOrder
from models.t_order import TOrder
from models.item import Item
from models.organization import Organization
from models.order_types import OrderType


class OrderFromSalesConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π Sales –≤ Orders"""
    
    def __init__(self, db: Session):
        self.db = db
        self.stats = {
            "processed_orders": 0,
            "created_orders": 0,
            "updated_orders": 0,
            "created_items": 0,
            "skipped_sales": 0,
            "errors": []
        }
    
    def convert_all_sales(self) -> Dict:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sales –≤ –∑–∞–∫–∞–∑—ã.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é sales -> orders...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ order_id –∏–∑ sales
        unique_order_ids = self.db.query(Sales.order_id)\
            .filter(Sales.order_id.isnot(None))\
            .distinct()\
            .all()
        
        total_orders = len(unique_order_ids)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {total_orders}")
        
        for idx, (order_id,) in enumerate(unique_order_ids, 1):
            if idx % 10 == 0 or idx == total_orders:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx}/{total_orders} –∑–∞–∫–∞–∑–æ–≤...")
            
            try:
                self._process_order(order_id)
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}"
                print(f"‚ùå {error_msg}")
                self.stats["errors"].append(error_msg)
        
        self.db.commit()
        self._print_stats()
        return self.stats
    
    def convert_sales_by_date_range(
        self, 
        start_date: datetime, 
        end_date: datetime
    ) -> Dict:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ sales –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å {start_date} –ø–æ {end_date}...")
        
        unique_order_ids = self.db.query(Sales.order_id)\
            .filter(
                Sales.order_id.isnot(None),
                Sales.open_time >= start_date,
                Sales.open_time <= end_date
            )\
            .distinct()\
            .all()
        
        total_orders = len(unique_order_ids)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_orders}")
        
        for idx, (order_id,) in enumerate(unique_order_ids, 1):
            if idx % 10 == 0 or idx == total_orders:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx}/{total_orders} –∑–∞–∫–∞–∑–æ–≤...")
            
            try:
                self._process_order(order_id)
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order_id}: {str(e)}"
                print(f"‚ùå {error_msg}")
                self.stats["errors"].append(error_msg)
        
        self.db.commit()
        self._print_stats()
        return self.stats
    
    def _process_order(self, order_id: str) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∑–∞–∫–∞–∑: —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ d_orders –∏ t_orders.
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞ –∏–∑ iiko
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ sales –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        sales_records = self.db.query(Sales)\
            .filter(Sales.order_id == order_id)\
            .order_by(Sales.open_time)\
            .all()
        
        if not sales_records:
            self.stats["skipped_sales"] += 1
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        first_sale = sales_records[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑
        existing_order = self.db.query(DOrder)\
            .filter(DOrder.iiko_id == order_id)\
            .first()
        
        if existing_order:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
            order = self._update_order(existing_order, sales_records)
            self.stats["updated_orders"] += 1
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            order = self._create_order(first_sale, sales_records)
            self.db.add(order)
            self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Å–≤—è–∑–∏ —Å t_orders
            self.stats["created_orders"] += 1
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        self._process_order_items(order, sales_records)
        
        self.stats["processed_orders"] += 1
    
    def _create_order(self, first_sale: Sales, sales_records: List[Sales]) -> DOrder:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞ –≤ d_orders.
        
        Args:
            first_sale: –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            sales_records: –í—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
            
        Returns:
            DOrder: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º organization
        organization_id = self._get_or_create_organization(first_sale)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º order_type
        order_type_id = self._get_or_create_order_type(first_sale)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        total_sum = sum(
            sale.dish_sum_int or Decimal(0) 
            for sale in sales_records
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å–∫–∏–¥–∫—É
        total_discount = sum(
            sale.dish_discount_sum_int or Decimal(0) 
            for sale in sales_records
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = DOrder(
            iiko_id=first_sale.order_id,
            organization_id=organization_id,
            external_number=first_sale.external_number,
            phone=first_sale.delivery_phone,
            guest_count=first_sale.guest_num or 0,
            tab_name=first_sale.table_num if first_sale.table_num else None,
            order_type_id=order_type_id,
            sum_order=total_sum,
            state_order=first_sale.order_deleted or "completed",
            discount=total_discount,
            service=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            bank_commission=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            time_order=first_sale.open_time or datetime.now(),
            deleted=first_sale.order_deleted == "DELETED",
            
            # JSON –ø–æ–ª—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            customer=self._extract_customer_info(first_sale),
            payments=self._extract_payments_info(sales_records),
            discounts_info=self._extract_discounts_info(sales_records),
            external_data=self._extract_external_data(first_sale),
        )
        
        return order
    
    def _update_order(
        self, 
        existing_order: DOrder, 
        sales_records: List[Sales]
    ) -> DOrder:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ sales.
        
        Args:
            existing_order: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
            sales_records: –ó–∞–ø–∏—Å–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            DOrder: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        """
        first_sale = sales_records[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not existing_order.phone and first_sale.delivery_phone:
            existing_order.phone = first_sale.delivery_phone
        
        if not existing_order.guest_count and first_sale.guest_num:
            existing_order.guest_count = first_sale.guest_num
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
        total_sum = sum(
            sale.dish_sum_int or Decimal(0) 
            for sale in sales_records
        )
        total_discount = sum(
            sale.dish_discount_sum_int or Decimal(0) 
            for sale in sales_records
        )
        
        existing_order.sum_order = total_sum
        existing_order.discount = total_discount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º JSON –ø–æ–ª—è
        if not existing_order.customer:
            existing_order.customer = self._extract_customer_info(first_sale)
        
        if not existing_order.payments:
            existing_order.payments = self._extract_payments_info(sales_records)
        
        return existing_order
    
    def _process_order_items(
        self, 
        order: DOrder, 
        sales_records: List[Sales]
    ) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ t_orders.
        
        –í–ê–ñ–ù–û: –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å sales = –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –∑–∞–∫–∞–∑–µ (–æ–¥–Ω–æ –±–ª—é–¥–æ).
        –£ sales –ù–ï–¢ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º iiko_id –¥–ª—è t_orders.
        
        Args:
            order: –ó–∞–∫–∞–∑
            sales_records: –ó–∞–ø–∏—Å–∏ –ø—Ä–æ–¥–∞–∂ (–∫–∞–∂–¥–∞—è = –æ–¥–Ω–æ –±–ª—é–¥–æ –≤ –∑–∞–∫–∞–∑–µ)
        """
        # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        existing_items = self.db.query(TOrder)\
            .filter(TOrder.order_id == order.id)\
            .all()
        
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ (–∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω)
        if existing_items:
            return
        
        for sale in sales_records:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –±–ª—é–¥–∞
            if not sale.dish_id:
                self.stats["skipped_sales"] += 1
                continue
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ iiko_id
            item = self.db.query(Item)\
                .filter(Item.iiko_id == sale.dish_id)\
                .first()
            
            if not item:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å
                item = self._create_item_from_sale(sale)
                self.db.add(item)
                self.db.flush()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞
            # –í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º item_sale_event_id –∫–∞–∫ iiko_id, 
            # —Ç.–∫. –æ–Ω –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π!
            order_item = TOrder(
                iiko_id=None,  # –£ sales –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
                item_id=item.id,
                order_id=order.id,
                count_order=sale.dish_amount_int or 1,
                time_order=sale.open_time or datetime.now(),
                comment_order=sale.order_comment
            )
            self.db.add(order_item)
            self.stats["created_items"] += 1
    
    def _get_or_create_organization(self, sale: Sales) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ sales."""
        if not sale.organization_id:
            return None
        
        return sale.organization_id
    
    def _get_or_create_order_type(self, sale: Sales) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∏–ø –∑–∞–∫–∞–∑–∞.
        
        Args:
            sale: –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏
            
        Returns:
            Optional[int]: ID —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None
        """
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ –∑–∞–∫–∞–∑–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not sale.order_type_id and not sale.order_type:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º iiko_id –∏ name –¥–ª—è order_type
        iiko_id = sale.order_type_id or f"unknown_{sale.order_type}"
        name = sale.order_type or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –ø–æ iiko_id
        order_type = self.db.query(OrderType)\
            .filter(OrderType.iiko_id == iiko_id)\
            .first()
        
        if order_type:
            return order_type.id
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞
        # –ú–æ–¥–µ–ª—å OrderType –∏–º–µ–µ—Ç –ø–æ–ª—è: id, iiko_id, name, is_deleted
        new_order_type = OrderType(
            iiko_id=iiko_id,
            name=name,
            is_deleted=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É–¥–∞–ª–µ–Ω–æ
        )
        self.db.add(new_order_type)
        self.db.flush()
        
        return new_order_type.id
    
    def _create_item_from_sale(self, sale: Sales) -> Item:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö sales.
        
        Args:
            sale: –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏
            
        Returns:
            Item: –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        """
        item = Item(
            iiko_id=sale.dish_id,
            name=sale.dish_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ",
            code=sale.dish_code,
            price=sale.dish_sum_int or Decimal(0),
            organization_id=sale.organization_id,
            data_source="sales_import",
            description=sale.dish_full_name,
            measure_unit=sale.dish_measure_unit,
            type=sale.dish_type,
        )
        
        return item
    
    def _extract_customer_info(self, sale: Sales) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ sales."""
        if not any([
            sale.delivery_customer_name,
            sale.delivery_customer_phone,
            sale.delivery_customer_email
        ]):
            return None
        
        return {
            "name": sale.delivery_customer_name,
            "phone": sale.delivery_customer_phone,
            "email": sale.delivery_customer_email,
            "comment": sale.delivery_customer_comment,
            "card_number": sale.delivery_customer_card_number,
            "card_type": sale.delivery_customer_card_type,
        }
    
    def _extract_payments_info(self, sales_records: List[Sales]) -> Optional[List[Dict]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö."""
        payments = []
        
        for sale in sales_records:
            if sale.pay_types and sale.dish_sum_int:
                payment = {
                    "type": sale.pay_types,
                    "sum": float(sale.dish_sum_int),
                    "is_print_cheque": sale.pay_types_is_print_cheque,
                    "voucher_num": sale.pay_types_voucher_num,
                }
                payments.append(payment)
        
        return payments if payments else None
    
    def _extract_discounts_info(self, sales_records: List[Sales]) -> Optional[List[Dict]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–∞—Ö."""
        discounts = []
        
        for sale in sales_records:
            if sale.discount_sum and sale.discount_sum > 0:
                discount = {
                    "type": sale.order_discount_type,
                    "sum": float(sale.discount_sum),
                    "percent": float(sale.discount_percent) if sale.discount_percent else None,
                    "guest_card": sale.order_discount_guest_card,
                }
                discounts.append(discount)
        
        return discounts if discounts else None
    
    def _extract_external_data(self, sale: Sales) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ."""
        external_data = {}
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        if sale.delivery_is_delivery:
            external_data["delivery"] = {
                "is_delivery": sale.delivery_is_delivery,
                "address": sale.delivery_address,
                "city": sale.delivery_city,
                "street": sale.delivery_street,
                "courier": sale.delivery_courier,
                "courier_id": sale.delivery_courier_id,
                "expected_time": sale.delivery_expected_time.isoformat() if sale.delivery_expected_time else None,
                "actual_time": sale.delivery_actual_time.isoformat() if sale.delivery_actual_time else None,
            }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ —Å–µ—Å—Å–∏–∏
        if sale.session_id or sale.cash_register_name:
            external_data["terminal"] = {
                "session_id": sale.session_id,
                "session_num": sale.session_num,
                "cash_register": sale.cash_register_name,
                "cash_register_number": sale.cash_register_name_number,
            }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–µ
        if sale.waiter_name:
            external_data["waiter"] = {
                "name": sale.waiter_name,
                "id": sale.waiter_name_id,
            }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Å–∏—Ä–µ
        if sale.cashier:
            external_data["cashier"] = {
                "name": sale.cashier,
                "id": sale.cashier_id,
            }
        
        return external_data if external_data else None
    
    def _print_stats(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò")
        print("="*60)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤:      {self.stats['processed_orders']}")
        print(f"üÜï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:   {self.stats['created_orders']}")
        print(f"‚ôªÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:       {self.stats['updated_orders']}")
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π:         {self.stats['created_items']}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:       {self.stats['skipped_sales']}")
        
        if self.stats["errors"]:
            print(f"\n‚ùå –û—à–∏–±–æ–∫: {len(self.stats['errors'])}")
            for error in self.stats["errors"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"   - {error}")
            if len(self.stats["errors"]) > 5:
                print(f"   ... –∏ –µ—â–µ {len(self.stats['errors']) - 5} –æ—à–∏–±–æ–∫")
        else:
            print("\n‚ú® –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫!")
        
        print("="*60 + "\n")


def convert_sales_to_orders(
    db: Session,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None
) -> Dict:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ sales –≤ orders.
    
    Args:
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
    Example:
        from database.database import get_db
        from utils.order_from_sales import convert_sales_to_orders
        
        db = next(get_db())
        stats = convert_sales_to_orders(db)
        
        # –ò–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥:
        from datetime import datetime
        stats = convert_sales_to_orders(
            db,
            start_date=datetime(2024, 1, 1),
            end_date=datetime(2024, 1, 31)
        )
    """
    converter = OrderFromSalesConverter(db)
    
    if start_date and end_date:
        return converter.convert_sales_by_date_range(start_date, end_date)
    else:
        return converter.convert_all_sales()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if __name__ == "__main__":
    from database.database import SessionLocal
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Sales -> Orders")
    print("="*60)
    
    db = SessionLocal()
    try:
        stats = convert_sales_to_orders(db)
        print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        db.rollback()
    finally:
        db.close()

