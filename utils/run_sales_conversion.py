"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ sales –≤ orders.

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏:
   python utils/run_sales_conversion.py --all

2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥:
   python utils/run_sales_conversion.py --start 2024-01-01 --end 2024-01-31

3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π:
   python utils/run_sales_conversion.py --days 7
"""

import argparse
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database.database import SessionLocal
from utils.order_from_sales import convert_sales_to_orders


def parse_date(date_string: str) -> datetime:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."""
    try:
        return datetime.strptime(date_string, "%Y-%m-%d")
    except ValueError:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_string}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")


def main():
    parser = argparse.ArgumentParser(
        description="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sales –≤ d_orders –∏ t_orders",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  %(prog)s --all                           # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
  %(prog)s --start 2024-01-01 --end 2024-01-31  # –ó–∞ –ø–µ—Ä–∏–æ–¥
  %(prog)s --days 7                        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  %(prog)s --days 30                       # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        """
    )
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        '--all',
        action='store_true',
        help='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sales'
    )
    group.add_argument(
        '--days',
        type=int,
        help='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π'
    )
    
    parser.add_argument(
        '--start',
        type=str,
        help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å --end)'
    )
    parser.add_argument(
        '--end',
        type=str,
        help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å --start)'
    )
    
    args = parser.parse_args()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if args.start and not args.end:
        parser.error("--start —Ç—Ä–µ–±—É–µ—Ç --end")
    if args.end and not args.start:
        parser.error("--end —Ç—Ä–µ–±—É–µ—Ç --start")
    
    if (args.start or args.end) and (args.all or args.days):
        parser.error("--start/--end –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å --all –∏–ª–∏ --days")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    start_date = None
    end_date = None
    
    if args.all:
        print("üîÑ –†–µ–∂–∏–º: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –í–°–ï–• –∑–∞–ø–∏—Å–µ–π –∏–∑ sales")
    elif args.days:
        end_date = datetime.now()
        start_date = end_date - timedelta(days=args.days)
        print(f"üîÑ –†–µ–∂–∏–º: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {args.days} –¥–Ω–µ–π")
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}")
    elif args.start and args.end:
        start_date = parse_date(args.start)
        end_date = parse_date(args.end)
        print(f"üîÑ –†–µ–∂–∏–º: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥")
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}")
    
    print("\n" + "="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        stats = convert_sales_to_orders(
            db=db,
            start_date=start_date,
            end_date=end_date
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        print("\n‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ —É—Å–ø–µ—Ö–∞
        return 0
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        db.rollback()
        return 1
        
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print("   –û—Ç–∫–∞—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        db.rollback()
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import traceback
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        print(traceback.format_exc())
        
        return 1
        
    finally:
        db.close()


if __name__ == "__main__":
    sys.exit(main())

